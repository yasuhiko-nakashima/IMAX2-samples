
/* int convf32tof8(Uchar*, float);            */
/* int convf8tof32(float*, Uchar);            */
/* int softf8(Uchar*, Uchar, Uchar, Uchar);   */
/* int convf32tos8(Uchar*, float);            */
/* int convs8tof32(float*, Ushort);           */
/* int convf32tos16(Ushort*, float);          */
/* int convs16tof32(float*, Ushort);          */
/* int convs16tos8(Uchar*, Ushort, int);      */
/* int softs8(Ushort*, Ushort, Uchar, Uchar); */
/* int convf32tou8(char*, float);             */
/* int convu8tof32(float*, char);             */
/* int softu64(char*, char, Ull, Ull);        */

#ifndef UTYPEDEF
#define UTYPEDEF
typedef unsigned char      Uchar;
typedef unsigned short     Ushort;
typedef unsigned int       Uint;
typedef unsigned long long Ull;
typedef long long int      Sll;
#if __AARCH64EL__ == 1
typedef long double Dll;
#else
typedef struct {Ull u[2];} Dll;
#endif
#endif

#include <stdio.h>
#include <stdlib.h>

typedef struct {
  Uint  f : 23;
  Uint  e :  8;
  Uint  s :  1;
} f32bit;

typedef struct {
  Uint  f :  7;
  Uint  e :  4;
  Uint  s :  1;
} f12bit;

typedef struct {
  Uint  f :  4;
  Uint  e :  3;
  Uint  s :  1;
} f8bit;

typedef struct {
  Uint  f : 15;
  Uint  s :  1;
} s16bit;

typedef struct {
  Uint  f :  7;
  Uint  s :  1;
} s8bit;

typedef struct {
  Uint  e :  6;
  Uint  b :  1;
  Uint  s :  1;
} u8bit;

typedef struct {
  Uchar u[8];
} u64bit;

typedef struct {
  Uchar u[32];
} u256bit;

#define MAXINT (~(1<<(sizeof(int)*8-1)))
#define ERRTH  (4.0E-2)
#define TH1 0x2
#define TH2 0xff
#define TH3 0xfff

#define abs(a)     ((a)>  0 ? (a) :-(a)    )
#define sub0(a, b) ((a)<=(b)? (0) : (a)-(b))
#define max(a, b)  ((a)>=(b)? (a) : (b)    )
#define min(a, b)  ((a)<=(b)? (a) : (b)    )

Uint max_exp=0, min_exp=999;

/******************************************************************************************************************************************/
/*** Floating point            ************************************************************************************************************/
/******************************************************************************************************************************************/

/* Fixed_point number (0.0-16.0)                                                                                                          */
/* up/low     0000  0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111                                            */
/* 0000       0.000 0.0625                                                                0.9375                                          */
/* 0001       1.000 1.0625                                                                1.9375                                          */
/* 0010       2.000 2.0625                                                                2.9375                                          */
/* 0011       3.000 3.0625                                                                3.9375                                          */
/* 0100       4.000 4.0625                                                                4.9375                                          */
/* 0101       5.000 5.0625                                                                5.9375                                          */
/* 0110       6.000 6.0625                                                                6.9375                                          */
/* 0111       7.000 7.0625                                                                7.9375                                          */
/* 1111       15.00 15.062                                                                15.938                                          */

/* Floating_point number (0.0-16.0) Traditional_8bit:s+3exp+4frac                                                                         */
/*       subnormal 2^(-2) 0.250 * 0.0000 - 0.1111 0.250*(               0.0625       )=0.015625                                           */
/*                                                0.250*(0.5+0.25+0.125+0.0625=0.9375)=0.234375                                           */
/*       normal    2^(exp-3)    * 1.0000 - 1.1111 0.250*(1.0                         )=0.250000                                           */
/*                                                8.000*(1.5+0.25+0.125+0.0625=1.9375)=15.50000                                           */
/*       infinite  s1110000     nan       s111xxxx                                                                                        */
/*       frac=0000  0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111                                            */
/* exp=0(sub) zero  0.0156                                                                0.234                                           */
/* exp=1      0.250                                                                       0.484                                           */
/* exp=2      0.500                                                                       0.969                                           */
/* exp=3      1.000                1.25                                                   1.938                                           */
/* exp=4      2.000                                                                       3.875                                           */
/* exp=5      4.000                                                                       7.750                                           */
/* exp=6      8.000                10.0                                                   15.50                                           */
/* exp=7      inf   nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan                                             */

/* Traditional pipelined FPU (32bit s-8exp-23frac)                                                                                        */
/* FPGAclk 150MHz __/~T0~~\_____/~~T1~\_____/~T2~~\_____/~T3~~\_____/~T0~~\_____/~~~~~\_____/~~~~~\_____                                  */
/* FPU-in123:     ==V>----------------------------------------------------------------------------------                                  */
/* FPU-st1:       ---<==REGsel==V>----------------------------------------------------------------------                                  */
/* FPU-st2:       ---------------<==32bit*3=V>----------------------------------------------------------                                  */
/* FPU-st3:       ---------------------------<==32bit*1=V>----------------------------------------------                                  */
/* FPU-st4:       ---------------------------------------<==32bit*1=V>----------------------------------                                  */
/* FPU-out:       ---------------------------------------------------<==32bit*1=V>----------------------                                  */

/* inがdigital-spike(0/1のみ)の場合,in反転可能.pat39パターンマッチング(conv_forward))に適                                                 */
/* in0+ _/~\_____/~\_/~\_________/~\_/~\                                                                                                  */
/* in0- _____/~\_________/~\_/~\________ w-> _____/~\_________/~\_/~\_  \                                                                 */
/* in1+ _/~\_/~\_/~\____________________ w+> _/~\_/~\_/~\_____________  |\    2   3   2   1   2   2                                       */
/* in1- _____________/~\_/~\_/~\_/~\_/~\                                | > _/~\_/~\_/~\_____/~\_/~\_                                     */
/* in2+ _________________________/~\_/~\                                |/                                                                */
/* in2- _/~\_/~\_/~\_/~\_/~\_/~\________ w-> _/~\_/~\_/~\_/~\_/~\_/~\_  /                                                                 */

/* Floating_point number (0.0-2.0) Modified_8bit:s+3exp+4frac                                                                             */
/*       subnormal 2^(-6) 0.01562 * 0.0000 - 0.1111 0.01562*(               0.0625       )=0.000976                                       */
/*                                                  0.01562*(0.5+0.25+0.125+0.0625=0.9375)=0.014643                                       */
/*       normal  2^(-7) 0.0078125 * 1.0000 - 1.1111 0.0078125*(1.0+         0.0625       )=0.008301                                       */
/*                                                0.0078125*(1.5+0.25+0.125+0.0625=1.9375)=0.015137                                       */
/*       normal    2^(exp-7)      * 1.0000 - 1.1111 0.01562*(1.0                         )=0.015625                                       */
/*                                                  1.00000*(1.5+0.25+0.125+0.0625=1.9375)=1.937500                                       */
/*       frac=0000  0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111                                            */
/* exp=0(sub) zero  0.0009766                                                             0.0146                                          */
/* exp=0(nor) zero  0.008301                                                              0.0151                                          */
/* exp=1      0.015625                                                                    0.0303                                          */
/* exp=2      0.03125                                                                     0.0605                                          */
/* exp=3      0.0625                        1.5*0.0625=0.09375                            0.1211                                          */
/* exp=4      0.125                                                                       0.2422                                          */
/* exp=5      0.250                                                                       0.4844                                          */
/* exp=6      0.500                                                                       0.9688                                          */
/* exp=7      1.000                1.25           1.44                                    1.9375                                          */

/* 従来のstochastic(確率)ともspiking(パルス強度)とも異なる, serial-bus-computation(HPC)の仕組みを考える                                   */
/* Mult in.exp*w.exp(000,  001,  010,  011,  100,  101,  110,  111)                                                                       */
/*                   x.007 x.015 x.03  x.06  x.125 x.25  x.5   x1                                                                         */
/*                                            x.5(110):pass-counter                                                                       */
/*                  0   1   2   3   4   5   6  cut1.pass6  0   1   2   3   4   5   6                                                      */
/*                _/~\_/~\_/~\_/~\_/~\_/~\_/~\    ->     _/~\_/~\_/~\_/~\_/~\_/~\_/~\_                                                    */
/*     w.exp:6 .5 _____/~~~~~~~~~~~~~~~~~~~~~\           _/~~~~~~~~~~~~~~~~~~~~~\_____                                                    */
/* in zero e:0    ____________________________    -> out _____________________________                                                    */
/*    0.06 e:3    _/~\_/~\_/~\________________    ->     _/~\_/~\_____________________                                                    */
/*    0.50 e:6    _/~\_/~\_/~\_/~\_/~\_/~\____    ->     _/~\_/~\_/~\_/~\_/~\_________                                                    */
/*                                                                                                                                        */
/* Mult in.frac*w.frac(0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111)                    */
/*                     1.00  1.06  1.12  1.18  1.24  1.30  1.36  1.42  1.48  1.54  1.60  1.66  1.72  1.78  1.84  1.90                     */
/*                                                                                                                                        */
/*                     1.00 * 1.00 = 1.00      1.99 * 1.00 = 1.99      1.99 * 1.99 = 3.96  0-2の範囲なら                                  */
/*                     0000 + 0000 = 0000      1111 + 0000 = 1111      1111 + 1111 = 11110    乗算->加算                                  */
/*                        0 +    0 =    0      0.99 +    0 = 0.99      0.99 + 0.99 = 1.98                                                 */
/*                       +1     +1     +1        +1     +1     +1        +1     +1     +1 少し小さいが可                                  */
/*                                             1.25 * 1.25 = 1.5625    1.50 * 1.50 = 2.25                                                 */
/*                                             0100 + 0100 = 1000      1000 + 1000 = 10000                                                */
/*                                             0.25 + 0.25 = 0.50      0.50 + 0.50 = 1.00                                                 */
/*                                               +1     +1     +1        +1     +1     +1                                                 */
/*                                          |                                                                                             */
/*                                       4.0+         *  正解 1.99*1.99=3.96                                                              */
/*                                          |        *                                                                                    */
/*                                          |        *                                                                                    */
/*                                       3.0+       *  * 近似 (1).99+(1).99=(1)1.98 (= 2.98)                                              */
/*                                          |       * *                                                                                   */
/*                                          |      * *                                                                                    */
/*                                       2.0+      **                                                                                     */
/*                                          |     **                                                                                      */
/*                                          |     *                                                                                       */
/*                                       1.0+    *       正解 1.00*1.00=1.00                                                              */
/*                                          |            近似 (1).00+(1).00=(1).00                                                        */
/*                                          |                                                                                             */
/*                                          +----+----+----+----+---                                                                      */
/*                                          0  1.00 1.99                                                                                  */

/* Σ(im=in*ww) f:符号対応(減算)が必要                                                                                                    */
/* まとめ .. f:0.00-1.99の範囲なので,乗算->加算で代用                                                                                     */
/*  0*0.71 + 0.0775*0.71 - 0.62*0.71 = -0.385 ★正解                                                                                      */
/*           0   1   2   3   4   5   6             0   1   2   3   .................   e   f          0                                   */
/*         _/~\_/~\_/~\_/~\_/~\_/~\_/~\          _/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\       _/~\                                  */
/*   w0.e:6_____/~~~~~~~~~~~~~~~~~~~~~\    w0.f:7_/~\_/~\_/~\_/~\_/~\_/~\_/~\___________1.42_ w0.s:0____                                  */
/*                                                                                                                                        */
/*  in0.e:0____________________________   in0.f:0____________________________________________                                             */
/*  *w0 (0+6-7)=0                         in0.f:0_______________________________________0.00_                                             */
/*  ou0.e:0______.___.___.___.___._____                                                                                                   */
/*  e0.0000*f0.00        e最大との差 >  5           spike数1/32に                            in0.s:0____                                  */
/*                                   |                                                                                                    */
/*  in1.e:3_/~\_/~\_/~\________________   in1.f:4_/~\_____/~\_____/~\_____/~\___________1.24_                                             */
/*  *w0 (3+6-7=2)                         in1.f:12  7+4で代用 /~\_/~\_/~\_/~\_/~\_/~\_/~1.76_(1.66)                                       */
/*  ou1.e:2_____/~\_/~\__.___.___._____             w1.42*in1.24=1.76                                                                     */
/*  e0.0625*f1.24        e最大との差 >  3           spike数1/8に 11/8 = 0.0625 /8 = 0        in1.s:0____                                  */
/*                                                  spike数の右シフト方式は要検討(分周器で可能?)                                          */
/*                                   |                                                                                                    */
/*  in2.e:6_/~\_/~\_/~\_/~\_/~\_/~\____   in2.f:4_/~\_____/~\_____/~\_____/~\___________1.24_                                             */
/*  *w0 (6+6-7=5)                         in2.f:12  7+4で代用 /~\_/~\_/~\_/~\_/~\_/~\_/~1.76_(1.66)                                       */
/*  ou2.e:5_____/~\_/~\_/~\_/~\_/~\____             w1.42*in1.24=1.76                                                                     */
/*  e0.5000*f1.24        e最大が基準 >  0                       1.76/1 = 1.66                in2.s:1_/~\                                  */
/*                                   |                                                                                                    */
/*  max.e:5_____/~\_/~\_/~\_/~\_/~\__5_                                   sum:f:pulse数は 0+0-11 = -1.66                                  */
/*                                                  結果は, 0.25* -1.66 = -0.415 ★近似                                                   */

int convf32tof8(f8bit *out, float in)
{
  f32bit in_f32;

  *(float*)&in_f32 = in;

  if (max_exp < in_f32.e)                 max_exp = in_f32.e;
  if (min_exp > in_f32.e && in_f32.e > 0) min_exp = in_f32.e;

  out->s = in_f32.s;
  out->e = (in_f32.e < 120) ? 0 : (in_f32.e <= 127) ? in_f32.e - 120 :   7; /* min=0, max=1.9375 */
  out->f = (in_f32.e < 120) ? 0 : (in_f32.e <= 127) ? in_f32.f >> 19 : 0xf; /* min=0, max=1.9375 */
//printf("%x_%02.2x_%06.6x -> %x%01.1x%01.1x\n", in_f32.s, in_f32.e, in_f32.f<<1, out->s, out->e, out->f);
}

int convf8tof32(float *out, f8bit in)
{
  f32bit out_f32;

  out_f32.s = in.s;
  if (in.e == 0 && in.f == 0) {
    out_f32.e = 0;
    out_f32.f = 0;
  }
  else {
    out_f32.e = in.e + 120;
    out_f32.f = in.f << 19;
  }
//printf("%x%01.1x%01.1x -> %x_%02.2x_%06.6x\n", in.s, in.e, in.f, out_f32.s, out_f32.e, out_f32.f);

  *out = *(float*)&out_f32;
}

/* 0 000 0001 (subnormal) + 0 000 0001 (subnormal) * 0 111 0000 (1.0) */
/*                               00001             *      10000       */
/*                               pp[ 0]=110 ps[ 0]=0                  */
/*                               pp[ 1]=300 ps[ 1]=0                  */
/*                               pp[ 2]=c00 ps[ 2]=0                  */
/*                                 sum:1010                           */
/*                               fadd_s1: 0 01 00000001               */
/*                                 csa_s: 0 01 01fff701               */
/*                                 csa_c: 0 01 00000200               */

int softf8(f8bit *o, f8bit f1, f8bit f2, f8bit f3) /* o <- f1 + f2 * f3 */
{
  f12bit ad1_s, ad2_s, sum_s;

  /* f2 * f3 -> ad2 */
  if ((f2.e == 0 && f2.f == 0) || (f3.e == 0 && f3.f == 0)) {
    ad2_s.s = f2.s ^ f3.s;
    ad2_s.e = 0;
    ad2_s.f = 0;
  }
  else {
    ad2_s.s = f2.s ^ f3.s;
    ad2_s.e = f3.e + f2.e;
    ad2_s.f = 0x10 + f2.f + f3.f; /* 1.0補正 4bit+4bit mul->add */
  //ad2_s.f = 0x08 + f2.f + f3.f; /* 0.5補正 4bit+4bit mul->add */

    if (ad2_s.f & 0x20) /* 乗算の場合,     1.99 *   1.99 =       3.96  3.96 */
                        /* 加算 1.0補正, (1).99 + (1).99 = (1+1) 1.98  3.98 */
                        /*      0.5補正  (1).99 + (1).99 = (1+.5)1.98  3.48 */
                        /* 乗算の場合,     1.00 *   1.00 =       1.00  1.00 */
                        /* 加算 1.0補正  (1).00 + (1).00 = (1+1) 0.00  2.00 */
                        /*      0.5補正, (1).00 + (1).00 = (1+.5)0.00  1.50 */
                           { ad2_s.e += 1; ad2_s.f >>=    1; }
    if      (ad2_s.e <  7) { ad2_s.e  = 0; ad2_s.f   =    0; }
    else if (ad2_s.e < 15) { ad2_s.e -= 7;                      }
    else                   { ad2_s.e  = 7; ad2_s.f   = 0x1f; } /*最大値*/
  }
//printf("->%x%1x_%02.2x ", ad2_s.s, ad2_s.e, ad2_s.f);

  /* f1 + ad2 -> o */
  ad1_s.s = f1.s;
  ad1_s.e = f1.e;
  if (f1.e == 0 && f1.f == 0)
    ad1_s.f = 0;
  else
    ad1_s.f = 0x10 | f1.f;

  sum_s.e   = max (ad1_s.e, ad2_s.e);
  ad1_s.f >>= sub0(sum_s.e, ad1_s.e);
  ad2_s.f >>= sub0(sum_s.e, ad2_s.e);
  sum_s.s   = (ad1_s.s == ad2_s.s) ? ad1_s.s :
              (ad1_s.f  > ad2_s.f) ? ad1_s.s :
                                     ad2_s.s ;
  sum_s.f   = (ad1_s.s == ad2_s.s) ? ad1_s.f + ad2_s.f :
              (ad1_s.f  > ad2_s.f) ? ad1_s.f - ad2_s.f :
                                     ad2_s.f - ad1_s.f ;

  if      (sum_s.f ==   0) { sum_s.e  = 0; sum_s.f =   0; }
  else if (sum_s.f & 0x40) {
    if    (sum_s.e >=   6) { sum_s.e  = 7; sum_s.f = 0xf; }
    else                   { sum_s.e += 2; sum_s.f >>= 2; }
  }
  else if (sum_s.f & 0x20) {
    if    (sum_s.e >=   7) { sum_s.e  = 7; sum_s.f = 0xf; }
    else                   { sum_s.e += 1; sum_s.f >>= 1; }
  }
  else if (sum_s.f & 0x10) { sum_s.e -= 0; sum_s.f <<= 0; }
  else if (sum_s.f & 0x08) {
    if    (sum_s.e >    1) { sum_s.e -= 1; sum_s.f <<= 1; }
    else                   { sum_s.e  = 0; sum_s.f   = 0; }
  }
  else if (sum_s.f & 0x04) {
    if    (sum_s.e >    2) { sum_s.e -= 2; sum_s.f <<= 2; }
    else                   { sum_s.e  = 0; sum_s.f   = 0; }
  }
  else if (sum_s.f & 0x02) {
    if    (sum_s.e >    3) { sum_s.e -= 3; sum_s.f <<= 3; }
    else                   { sum_s.e  = 0; sum_s.f   = 0; }
  }
  else if (sum_s.f & 0x01) {
    if    (sum_s.e >    4) { sum_s.e -= 4; sum_s.f <<= 4; }
    else                   { sum_s.e  = 0; sum_s.f   = 0; }
  }

  o->s = sum_s.s;
  o->e = sum_s.e;
  o->f = sum_s.f; /* lower 4bit */
//printf("[%x%1x%1x] ", o->s, o->e, o->f);

  return(0);
}

/******************************************************************************************************************************************/
/*** Signed int                ************************************************************************************************************/
/******************************************************************************************************************************************/

int convf32tos8(s8bit *out, float in)
{
  //convf32tos8 e=127 1.000 -> 040 : 07f
  //convf32tos8 e=126 0.500 -> 020 : 040 
  //convf32tos8 e=125 0.250 -> 010 : 020 
  //convf32tos8 e=124 0.125 -> 008 : 010 
  //convf32tos8 e=123 0.062 -> 004 : 008 
  //convf32tos8 e=122 0.031 -> 002 : 004 
  //convf32tos8 e=121 0.015 -> 001 : 002 
  //convf32tos8 e=120 0.007 -> 000 : 001 
  //convf32tos8 e=119 0.000 -> 000 : 000
  f32bit in_f32;

  *(float*)&in_f32 = in;

  if (max_exp < in_f32.e)                 max_exp = in_f32.e;
  if (min_exp > in_f32.e && in_f32.e > 0) min_exp = in_f32.e;

  out->s = in_f32.s;
  if (in_f32.e < 120)
    out->f = 0;
  else if (in_f32.e <= 126)
    out->f = ((1<<23)|in_f32.f) >> (126 - in_f32.e + (24-7)); /* min=0, max=1111111 (0.999) */
  else
    out->f = 0x7f;
//printf("%f(%x_%x) -> %x%02.2x\n", *(float*)&in_f32, in_f32.e, in_f32.f, out->s, out->f);
}

int convs8tof32(float *out, s8bit in)
{
  f32bit out_f32;

  out_f32.s = in.s;
  if (in.f >= 0x40) { /* 0.999 - 0.500 */
    out_f32.e = 126;
    out_f32.f = in.f << 17;
  }
  else if (in.f >= 0x20) { /* 0.499 - 0.250 */
    out_f32.e = 125;
    out_f32.f = in.f << 18;
  }
  else if (in.f >= 0x10) { /* 0.249- 0.125 */
    out_f32.e = 124;
    out_f32.f = in.f << 19;
  }
  else if (in.f >= 0x08) { /* 0.124 - 0.062 */
    out_f32.e = 123;
    out_f32.f = in.f << 20;
  }
  else if (in.f >= 0x04) { /* 0.061 - 0.031 */
    out_f32.e = 122;
    out_f32.f = in.f << 21;
  }
  else if (in.f >= 0x02) { /* 0.030 - 0.015 */
    out_f32.e = 121;
    out_f32.f = in.f << 22;
  }
  else if (in.f >= 0x01) { /* 0.014 - 0.007 */
    out_f32.e = 120;
    out_f32.f = in.f << 23;
  }
  else { /* 0.000 */
    out_f32.e = 0;
    out_f32.f = 0;
  }
//printf("%x%02.2x -> %f\n", in_s8.s, in_s8.f, *(float*)&out_f32);
  
  *out = *(float*)&out_f32;
}

int convf32tos16(s16bit *out, float in)
{
  //convf32tos8 e=131 16.000 -> 07fff
  //convf32tos8 e=130  8.000 -> 040 
  //convf32tos8 e=129  4.000 -> 040 
  //convf32tos8 e=128  2.000 -> 040 
  //convf32tos8 e=127  1.000 -> 040 
  //convf32tos8 e=126  0.500 -> 040 
  //convf32tos8 e=125  0.250 -> 020 
  //convf32tos8 e=124  0.125 -> 010 
  //convf32tos8 e=123  0.062 -> 008 
  //convf32tos8 e=122  0.031 -> 004 
  //convf32tos8 e=121  0.015 -> 002 
  //convf32tos8 e=120  0.007 -> 001 
  //convf32tos8 e=119  0.007 -> 001 
  //convf32tos8 e=118  0.007 -> 001 
  //convf32tos8 e=117  0.007 -> 001 
  //convf32tos8 e=116  0.007 -> 001 
  //convf32tos8 e=115  0.000 -> 000
  f32bit in_f32;

  *(float*)&in_f32 = in;

  if (max_exp < in_f32.e)                 max_exp = in_f32.e;
  if (min_exp > in_f32.e && in_f32.e > 0) min_exp = in_f32.e;

  out->s = in_f32.s;
  if (in_f32.e < 116)
    out->f = 0;
  else if (in_f32.e <= 130)
    out->f = ((1<<23)|in_f32.f) >> (130 - in_f32.e + (24-15)); /* min=0, max=1111111 (15.999) */
  else
    out->f = 0x7fff;
//printf("%f(%x_%x) -> %x%02.2x\n", *(float*)&in_f32, in_f32.e, in_f32.f, out->s, out->f);
}

int convs16tof32(float *out, s16bit in)
{
  f32bit out_f32;

  out_f32.s = in.s;
  if (in.f >= 0x4000) {     /* 15.999 - 8.000 */
    out_f32.e = 130;
    out_f32.f = in.f <<  9; // [1111].11111100000
  }
  else if (in.f >= 0x2000) { /* 7.999 - 4.000 */
    out_f32.e = 129;
    out_f32.f = in.f << 10;
  }
  else if (in.f >= 0x1000) { /* 3.999 - 2.000 */
    out_f32.e = 128;
    out_f32.f = in.f << 11;
  }
  else if (in.f >= 0x0800) { /* 1.999 - 1.000 */
    out_f32.e = 127;
    out_f32.f = in.f << 12;
  }
  else if (in.f >= 0x0400) { /* 0.999 - 0.500 */
    out_f32.e = 126;
    out_f32.f = in.f << 13;
  }
  else if (in.f >= 0x0200) { /* 0.499 - 0.250 */
    out_f32.e = 125;
    out_f32.f = in.f << 14;
  }
  else if (in.f >= 0x0100) { /* 0.249 - 0.125 */
    out_f32.e = 124;
    out_f32.f = in.f << 15;
  }
  else if (in.f >= 0x0080) { /* 0.124 - 0.625 */
    out_f32.e = 123;
    out_f32.f = in.f << 16;
  }
  else if (in.f >= 0x0040) { /* 0.624 - 0.312 */
    out_f32.e = 122;
    out_f32.f = in.f << 17;
  }
  else if (in.f >= 0x0020) { /* 0.311 - 0.155 */
    out_f32.e = 121;
    out_f32.f = in.f << 18;
  }
  else if (in.f >= 0x0010) { /* 0.154 - 0.077 */
    out_f32.e = 120;
    out_f32.f = in.f << 19;
  }
  else if (in.f >= 0x0008) { /* 0.076 - 0.038 */
    out_f32.e = 119;
    out_f32.f = in.f << 20;
  }
  else if (in.f >= 0x0004) { /* 0.037 - 0.013 */
    out_f32.e = 118;
    out_f32.f = in.f << 21;
  }
  else if (in.f >= 0x0002) { /* 0.012 - 0.006 */
    out_f32.e = 117;
    out_f32.f = in.f << 22;
  }
  else if (in.f >= 0x0001) { /* 0.005 - 0.002 */
    out_f32.e = 116;
    out_f32.f = in.f << 23;
  }
  else { /* 0.000 */
    out_f32.e = 0;
    out_f32.f = 0;
  }
//printf("%x%02.2x -> %f\n", in_s8.s, in_s8.f, *(float*)&out_f32);
  
  *out = *(float*)&out_f32;
}

int convs16tos8(s8bit *out, s16bit in, int sft)
{
  if (sft<0) sft = 0;

  out->s = in.s;
  if ((in.f>>sft) > 0x7f)  // [----].11111100000
    out->f = 0x7f;
  else
    out->f = in.f>>sft;

//printf("%x%02.2x <- %x%04.4x\n", out->s, out->f, in.s, in.f);
}

int softs8(s16bit *o, s16bit s1, s8bit s2, s8bit s3) /* o <- f1 + f2 * f3 */
{
  s16bit ad2, sum;

  /* s2 * s3 -> ad2 */
  ad2.s = s2.s ^ s3.s;
  if (s2.f == 0 || s3.f == 0)
    ad2.f = 0;
  else
    ad2.f = (s2.f * s3.f)>>3; // 0.1111111 * 0.1111111 = [----].11111100000(001)

  if (s1.s == ad2.s) {
    sum.s = s1.s;
    sum.f = s1.f + ad2.f; // [----].11111100000
  }
  else if (s1.f > ad2.f) {
    sum.s = s1.s;
    sum.f = s1.f - ad2.f; // [----].11111100000
  }
  else {
    sum.s = ad2.s;
    sum.f = ad2.f - s1.f; // [----].11111100000
  }

  o->s = sum.s;
  o->f = sum.f;

//printf("%x%04.4x(%04.4x) <- %x%04.4x %x%02.2x %x%02.2x\n", o->s, o->f, sum.f, s1.s, s1.f, s2.s, s2.f, s3.s, s3.f);

  return(0);
}

#if 0
/******************************************************************************************************************************************/
/*** Unary int Ver.1           ************************************************************************************************************/
/******************************************************************************************************************************************/

int convf32tou8(u8bit *out, float in)
{
  //              e=126     0.984 -> s0111111  0111111111111111111111111111111111111111111111111111111111111111
  //              e=126     0.969 -> s0011111  01111111111111111111111111111111
  //              e=126     0.938 -> s0001111  0111111111111111
  //              e=126     0.875 -> s0000111  01111111
  //              e=126     0.750 -> s0000011  0111
  //  convf32tou8 e=126     0.666 -> s0000010  011
  //  convf32tou8 e=126     0.500 -> s0000001  01
  //                        0.000 -> s0000000  0
  //  convf32tou8 e=127 f=0 1.000 -> s1000000  1
  //  convf32tou8 e=126 f=0 0.500 -> s1000001  10
  //  convf32tou8 e=125     0.333 -> s1000010  100
  //  convf32tou8 e=125 f=0 0.250 -> s1000011  1000
  //  convf32tou8 e=124     0.249 -> s1000100  10000
  //  convf32tou8 e=124 f=0 0.125 -> s1000111  10000000
  //  convf32tou8 e=123     0.124 -> s1001000  100000000
  //  convf32tou8 e=123 f=0 0.062 -> s1001111  1000000000000000
  //  convf32tou8 e=122     0.061 -> s1001111  10000000000000000
  //  convf32tou8 e=122 f=0 0.031 -> s1011111  10000000000000000000000000000000
  //  convf32tou8 e=121     0.030 -> s1100000  100000000000000000000000000000000
  //  convf32tou8 e=121 f=0 0.016 -> s1111111  1000000000000000000000000000000000000000000000000000000000000000
  f32bit in_f32;
  int one, zero;

  *(float*)&in_f32 = in;

  if (max_exp < in_f32.e)                 max_exp = in_f32.e;
  if (min_exp > in_f32.e && in_f32.e > 0) min_exp = in_f32.e;

  in = abs(in);
  out->s = in_f32.s;

  if (in >= 1.0) {
    out->b = 1;
    out->e = 0;
  }
  else if (in > 0.5) {
    one = 1.0/(1.0-in); /* number of preceding 1 */    
    if (one<=64) {
      out->b = 0;
      out->e = one-1;
    }
    else {
      out->b = 1;
      out->e = 0;
    }
  }
  else if (in > 0.0) {
    zero = 1.0/in; /* number of preceding 0 */    
    if (zero<=64) {
      out->b = 1;
      out->e = zero-1;
    }
    else {
      out->b = 0;
      out->e = 0;
    }
  }
  else {
    out->b = 0;
    out->e = 0;
  }

//printf("%7.4f -> %02.2x\n", *(float*)&in_f32, *(Uchar*)out);
}

int convu8tof32(float *out, u8bit in)
{
  f32bit out_f32;

  if (!in.b) /* ==0 || >0.5 */
    *(float*)&out_f32 = 1.0 - (1.0/(float)(in.e+1));
  else       /* ==1 || <0.5 */
    *(float*)&out_f32 =       (1.0/(float)(in.e+1));
  out_f32.s = in.s;
  *out = *(float*)&out_f32;

//printf("%02.2x -> %7.4f\n", *(Uchar*)&in, *out);
}

int softu64(u8bit *o, u8bit s1, u64bit s2, u64bit s3) /* o <- f1 + f2 * f3 */
{
  int i, j;
  int s2_count[8], s3_count[8];
  Ull s2_64[8], s3_64[8];
  Ull smul[8];
  int sadpn, sadnn; /* number of related result */
  int sadpx, sadnx; /* next index */
  Ull sadp,  sadn;
  int sadpc, sadnc; /* number of 1 */
  int out_c;

//printf("%08.8x_%08.8x * %08.8x_%08.8x\n", (Uint)((*(Ull*)&s2)>>32), (Uint)(*(Ull*)&s2), (Uint)((*(Ull*)&s3)>>32), (Uint)(*(Ull*)&s3));

  for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
#if 1
    s2_count[i] = rand()/(RAND_MAX/(((u8bit*)&s2.u[i])->e+1));
    s3_count[i] = rand()/(RAND_MAX/(((u8bit*)&s3.u[i])->e+1));
#else
    s2_count[i] = 0;
    s3_count[i] = 0;
#endif
    s2_64[i] = 0;
    s3_64[i] = 0;
    for (j=0; j<64; j++) {
      if (!s2_count[i]) { s2_count[i] = ((u8bit*)&s2.u[i])->e; s2_64[i] = (s2_64[i]<<1)|( ((u8bit*)&s2.u[i])->b); }
      else              { s2_count[i]--;                       s2_64[i] = (s2_64[i]<<1)|(!((u8bit*)&s2.u[i])->b); }
      if (!s3_count[i]) { s3_count[i] = ((u8bit*)&s3.u[i])->e; s3_64[i] = (s3_64[i]<<1)|( ((u8bit*)&s3.u[i])->b); }
      else              { s3_count[i]--;                       s3_64[i] = (s3_64[i]<<1)|(!((u8bit*)&s3.u[i])->b); }
    }

#if 0
    for (j=0; j<32; j++) {
      if (rand()<RAND_MAX/2)
	s2_64[i] = (s2_64[i]&~(1LL<<(63-j)|1LL<<j)) | (s2_64[i]>>j&1)<<(63-j) | (s2_64[i]>>(63-j)&1)<<j;
      if (rand()<RAND_MAX/2)
	s3_64[i] = (s3_64[i]&~(1LL<<(63-j)|1LL<<j)) | (s3_64[i]>>j&1)<<(63-j) | (s3_64[i]>>(63-j)&1)<<j;
    }
#endif

    smul[i]  = s2_64[i] & s3_64[i];
//  printf("%02.2x -> %08.8x_%08.8x\n", s2.u[i], (Uint)(s2_64[i]>>32), (Uint)s2_64[i]);
//  printf("%02.2x -> %08.8x_%08.8x\n", s3.u[i], (Uint)(s3_64[i]>>32), (Uint)s3_64[i]);
//  printf("   -> %08.8x_%08.8x\n", (Uint)(smul[i]>>32), (Uint)smul[i]);
  }

  sadpn = 0; sadpx = 0; sadp = 0LL;
  sadnn = 0; sadnx = 0; sadn = 0LL;

  for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
    if (!(((u8bit*)&s2.u[i])->s ^ ((u8bit*)&s3.u[i])->s)) sadpn++; /* pos */
    else                                                  sadnn++; /* neg */
  }

//printf("  sadpn=%d sadnn=%d\n", sadpn, sadnn);

  for (j=0; j<64; j++) {
    for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
      sadpx = (sadpx<7)?sadpx+1:0;
      if (!(((u8bit*)&s2.u[sadpx])->s ^ ((u8bit*)&s3.u[sadpx])->s)) {
	sadp  = (sadp<<1)|((smul[sadpx]>>j)&1);
	break;
      }
    }
    for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
      sadnx = (sadnx<7)?sadnx+1:0;
      if ( (((u8bit*)&s2.u[sadnx])->s ^ ((u8bit*)&s3.u[sadnx])->s)) {
	sadn = (sadn<<1)|((smul[sadnx]>>j)&1);
	break;
      }
    }
  }

//printf("  sadp=%08.8x_%08.8x sadnn=%08.8x_%08.8x\n", (Uint)(sadp>>32), (Uint)sadp, (Uint)(sadn>>32), (Uint)sadn);

  sadpc = 0;
  sadnc = 0;
  for (j=0; j<64; j++) {
    if ((sadp>>j)&1) sadpc++; /* pos # of 1 */
    if ((sadn>>j)&1) sadnc++; /* neg # of 1 */
  }
  sadpc *= sadpn; /* scaled add -> mag */
  sadnc *= sadnn; /* scaled add -> mag */

//printf("  sadpc=%d sadnc=%d\n", sadpc, sadnc);
//printf("  s1=%02.2x\n", *(Uchar*)&s1);

  sadpc += !s1.s ? (!s1.b ? 64-64/(s1.e+1) : 64/(s1.e+1)): 0; /* merge pos s1 */
  sadnc +=  s1.s ? (!s1.b ? 64-64/(s1.e+1) : 64/(s1.e+1)): 0; /* merge neg s1 */
  
//printf("  sadpc=%d sadnc=%d\n", sadpc, sadnc);

  if (sadpc >= sadnc)
    o->s = 0; /* pos */
  else 
    o->s = 1; /* neg */

  out_c = abs(sadpc-sadnc); /* # of 1 */

  if (out_c >= 64) {
    o->b = 1; /* >=1.0 */
    o->e = 0;
  }
  else if (out_c > 32) {
    o->b = 0; /* >0.5 */
    o->e = out_c/(64-out_c);
  }
  else if (out_c > 0) {
    o->b = 1; /* >0.0 */
    o->e = (64-out_c)/out_c;
  }
  else {
    o->b = 0; /* =0.0 */
    o->e = 0;
  }

//printf("  o=%02.2x\n", *(Uchar*)o);

  return(0);
}
#endif

#if 0
/******************************************************************************************************************************************/
/*** Unary int Ver.2           ************************************************************************************************************/
/******************************************************************************************************************************************/

int convf32tou8(u8bit *out, float in)
{
  //  convf32tou8 e=126     0.992 -> s1111111  1..1 1111111111111111111111111111111111111111111111111111111111111110
  //              e=126     0.984 -> s1111110  1..1 1111111111111111111111111111111111111111111111111111111111111100
  //              e=126     0.969 -> s1111100  1..1 1111111111111111111111111111111111111111111111111111111111110000
  //              e=126     0.938 -> s1111000  1..1 1111111111111111111111111111111111111111111111111111111100000000
  //              e=126     0.875 -> s1110000  1..1 1111111111111111111111111111111111111111111111110000000000000000
  //              e=126     0.750 -> s1100000  1..1 1111111111111111111111111111111100000000000000000000000000000000
  //  convf32tou8 e=126 f=0 0.500 -> s1000000  1..1 0000000000000000000000000000000000000000000000000000000000000000
  //  convf32tou8 e=125 f=0 0.250 -> s0100000  0..0 0000000000000000000000000000000011111111111111111111111111111111
  //  convf32tou8 e=124 f=0 0.125 -> s0010000  0..0 0000000000000000000000000000000000000000000000001111111111111111
  //  convf32tou8 e=123 f=0 0.062 -> s0001000  0..0 0000000000000000000000000000000000000000000000000000000011111111
  //  convf32tou8 e=122 f=0 0.031 -> s0000100  0..0 0000000000000000000000000000000000000000000000000000000000001111
  //  convf32tou8 e=121 f=0 0.016 -> s0000010  0..0 0000000000000000000000000000000000000000000000000000000000000011
  //  convf32tou8 e=120 f=0 0.008 -> s0000001  0..0 0000000000000000000000000000000000000000000000000000000000000001
  //                        0.000 -> s0000000  0..0 0000000000000000000000000000000000000000000000000000000000000000
  //
  // Spike測定のためには固定長.幅を小さくするには高さかバイアス使用.高さは乗算で使用するので圧縮にはバイアス使用
  // 入力値は面積で表現
  //                         _                        _                        _                        _1.00V
  //                         |                        |                        |__________________/~~\__|0.75V
  //                         |                        |____/~~~~~~~~~~~~~~\____|bias=92                 |0.50V
  // ________/~~~~~~~~~~\____|bias=0   4=0+4          |bias=64                 |                        |0.25V
  //  bias=32  48=32+16      |_______________/~~~\____|          88=64+24      |          95=92+3       |0.00V

  // xWで面積がW倍になるべき.W<1.0なら上限1.00Vに入る (w=0.5の場合)            _                        _1.00V
  //                         |                        |                        |                   AA   |0.75V
  //                         |                        |     AAAAAAAAAAAAAA     |AAAAAAAAAAAAAAAAAAA  AAA|0.50V
  //          AAAAAAAAAA     |                        |AAAAA              AAAAA|                        |0.25V
  // AAAAAAAAA          AAAAA|________________AAA_____|                        |                        |0.00V

  // このスパイク形状が容量素子を通過できるには、3種類の帯域を通す必要がある。
  // 1. AAAAのパルスの極短周期
  // 2. AAA^AAAに変化する短周期
  // 3. バイアス変動の中周期

  // うまくいかない場合,短周期を単純周波数にすると周波数の合成になる.(Spike加算になるかどうか)          _1.00V
  //                         |                        |                        |   A       A       A    |0.75V
  //                         |                        |A A A A A A A A A A A A |                        |0.50V
  // A A A A A A A A A A A A |                        |                        |                        |0.25V
  //                         |________________A_______|                        |                        |0.00V

  f32bit in_f32;

  *(float*)&in_f32 = in;

  if (max_exp < in_f32.e)                 max_exp = in_f32.e;
  if (min_exp > in_f32.e && in_f32.e > 0) min_exp = in_f32.e;

  out->s = in_f32.s;

  in = abs(in);
  if (in >= 1.0) {
    out->b = 1;
    out->e = 63;
  }
  else if (in >= 0.5) {
    out->b = 1;
    out->e = 128*in-64; /* number of preceding 1 */    
  }
  else {
    out->b = 0;
    out->e = 128*in;    /* number of succeding 1 */    
  }

//printf("%7.4f -> %02.2x\n", *(float*)&in_f32, *(Uchar*)out);
}

int convu8tof32(float *out, u8bit in)
{
  f32bit out_f32;

  if (in.b)  /* ==1 || >0.5 */
    *(float*)&out_f32 = (float)(in.e+64)/128;
  else       /* ==0 || <0.5 */
    *(float*)&out_f32 = (float)(in.e   )/128;
  out_f32.s = in.s;
  *out = *(float*)&out_f32;

//printf("%02.2x -> %7.4f\n", *(Uchar*)&in, *out);
}

int bitcountLL(Ull in)
{
  int i, c=0;
  for (i=0; i<64; i++) {
    if (in>>i&1)
      c++;
  }
  return(c);
}

int softu64(u8bit *o, u8bit s1, u64bit s2, u64bit s3) /* o <- f1 + f2 * f3 */
{
  int i, j;
  Ull s2_64[8], s3_64[8];
  int smulS[8];
  int smulH[8];
  Ull smulL[8];
  int sadpLn, sadnLn; /* number of related result */
  int sadpLx, sadnLx; /* next index */
  int sadpH,  sadnH;
  Ull sadpL,  sadnL;
  int sadpc,  sadnc;  /* number of 1 */
  int out_c;

#undef DEBUG_SOFTU64
//#define DEBUG_SOFTU64

#ifdef DEBUG_SOFTU64
  printf("%08.8x_%08.8x * %08.8x_%08.8x\n", (Uint)((*(Ull*)&s2)>>32), (Uint)(*(Ull*)&s2), (Uint)((*(Ull*)&s3)>>32), (Uint)(*(Ull*)&s3));
#endif

#if 0
  float s1_f32;
  float s2_f32;
  float s3_f32;
  convu8tof32(&s1_f32, s1);
  for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
    convu8tof32(&s2_f32, *(u8bit*)&s2.u[i]);
    convu8tof32(&s3_f32, *(u8bit*)&s3.u[i]);
    s1_f32 += s2_f32*s3_f32;
  }
  convf32tou8(o, s1_f32);
  return(0);
#endif

  sadpLn = 0; sadpLx = 0; sadpL = 0LL; sadpH = 0;
  sadnLn = 0; sadnLx = 0; sadnL = 0LL; sadnH = 0;

  // 8データ各要素の下位64bit基本パターン生成
  for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
    if (((u8bit*)&s2.u[i])->b) s2_64[i] = (Ull)0xfffffffffffffffeLL<<(63-(((u8bit*)&s2.u[i])->e));
    else                       s2_64[i] = (Ull)0x7fffffffffffffffLL>>(63-(((u8bit*)&s2.u[i])->e));
    if (((u8bit*)&s3.u[i])->b) s3_64[i] = (Ull)0xfffffffffffffffeLL<<(63-(((u8bit*)&s3.u[i])->e));
    else                       s3_64[i] = (Ull)0x7fffffffffffffffLL>>(63-(((u8bit*)&s3.u[i])->e));
    /* 1..1 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx */
    /*                       V                      */
    /* 1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x */
    /* 0..0 yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy */
    /*                       V                      */
    /* 0y0y0y0y0y0y0y0y0y0y0y0y0y0y0y0y0y0y0y0y0y0y */
    // 下位64bit内でシャッフル
    // シャッフルしなくても計算できているように見えるのは気のせい?
#if 1
    for (j=0; j<32; j++) {
      if (rand()<RAND_MAX/2)
	s2_64[i] = (s2_64[i]&~(1LL<<(63-j)|1LL<<j)) | (s2_64[i]>>j&1)<<(63-j) | (s2_64[i]>>(63-j)&1)<<j;
      if (rand()<RAND_MAX/2)
	s3_64[i] = (s3_64[i]&~(1LL<<(63-j)|1LL<<j)) | (s3_64[i]>>j&1)<<(63-j) | (s3_64[i]>>(63-j)&1)<<j;
    }
#endif
    // s2*s3 各要素の乗算
    smulS[i] = ((u8bit*)&s2.u[i])->s ^ ((u8bit*)&s3.u[i])->s;
    // 乗算結果のうち正数と負数のデータ数をカウント
    if (!smulS[i]) sadpLn++; /* pos */
    else           sadnLn++; /* neg */
    smulH[i] = ((u8bit*)&s2.u[i])->b & ((u8bit*)&s3.u[i])->b;//正確ではないが簡単
    // stochastic
    smulL[i] = s2_64[i] & s3_64[i];
#ifdef DEBUG_SOFTU64
    printf("%02.2x -> %08.8x_%08.8x\n", s2.u[i], (Uint)(s2_64[i]>>32), (Uint)s2_64[i]);
    printf("%02.2x -> %08.8x_%08.8x\n", s3.u[i], (Uint)(s3_64[i]>>32), (Uint)s3_64[i]);
    printf("    %d %08.8x_%08.8x\n", smulH[i], (Uint)(smulL[i]>>32), (Uint)smulL[i]);
#endif
  }

#ifdef DEBUG_SOFTU64
  printf("  sadpLn=%d sadnLn=%d\n", sadpLn, sadnLn);
#endif

  // stochastic
  // 正数/負数グループごとに，下位64bitから順にセレクト(spike平均化)
  for (j=0; j<64; j++) {
    for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
      sadpLx = (sadpLx<7)?sadpLx+1:0;
      if (!smulS[sadpLx]) {
	sadpL = (sadpL<<1)|((smulL[sadpLx]>>j)&1);
	break;
      }
    }
    for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
      sadnLx = (sadnLx<7)?sadnLx+1:0;
      if ( smulS[sadnLx]) {
	sadnL = (sadnL<<1)|((smulL[sadnLx]>>j)&1);
	break;
      }
    }
  }
  // 正数/負数グループごとの平均spikeにて,1の数を計測
  sadpc = bitcountLL(sadpL);
  sadnc = bitcountLL(sadnL);
  // 平均spike数に,正/負のデータ数を乗じると加算結果になる
  sadpc *= sadpLn; /* scaled add -> mag */
  sadnc *= sadnLn; /* scaled add -> mag */
#ifdef DEBUG_SOFTU64
  printf("  sadpL=%08.8x_%08.8x sadnL=%08.8x_%08.8x\n", (Uint)(sadpL>>32), (Uint)sadpL, (Uint)(sadnL>>32), (Uint)sadnL);
#endif

  // 加算結果に,さらに乗算結果のバイアス値を加算
  for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
    if (!smulS[i]) sadpc += smulH[i]*64;
    else           sadnc += smulH[i]*64;
  }

#ifdef DEBUG_SOFTU64
  printf("  sadpc=%d sadnc=%d\n", sadpc, sadnc);
  printf("  s1=%02.2x\n", *(Uchar*)&s1);
#endif

  // s1をさらに加算
  if (!s1.s) sadpc += s1.e + s1.b*64; /* merge pos s1 */
  else       sadnc += s1.e + s1.b*64; /* merge neg s1 */
  
#ifdef DEBUG_SOFTU64
  printf("  sadpc=%d sadnc=%d\n", sadpc, sadnc);
#endif

  // 正数と負数の加算
  if (sadpc >= sadnc) {
    o->s = 0; /* pos */
    out_c = sadpc-sadnc; /* # of 1 */
  }
  else {
    o->s = 1; /* neg */
    out_c = sadnc-sadpc; /* # of 1 */
  }
  if (out_c >= 128) {
    o->b = 1; /* >=1.0 */
    o->e = 63;
  }
  else if (out_c >= 64) {
    o->b = 1; /* >0.5 */
    o->e = out_c-64;
  }
  else {
    o->b = 0; /* >0.0 */
    o->e = out_c;
  }

#ifdef DEBUG_SOFTU64
  printf("  o=%02.2x\n", *(Uchar*)o);
#endif

#if 0
#if !defined(ARMSIML)
  //シャッフル無しでも結果画像は正常分布に見える
  static int count, color;
  float o1_f32;
  float s1_f32;
  float s2_f32;
  float s3_f32;
  convu8tof32(&o1_f32, *o); /* for graph */
  convu8tof32(&s1_f32, s1); /* for graph */
  for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
    convu8tof32(&s2_f32, *(u8bit*)&s2.u[i]); /* for graph */
    convu8tof32(&s3_f32, *(u8bit*)&s3.u[i]); /* for graph */
    s1_f32 += s2_f32*s3_f32;
  }
  count++;
  color = (count/1024)%7+1;
  switch(color) {
  case 1: color=0x0000ff; break;
  case 2: color=0x00ff00; break;
  case 3: color=0x00ffff; break;
  case 4: color=0xff0000; break;
  case 5: color=0xff00ff; break;
  case 6: color=0xffff00; break;
  case 7: color=0xffffff; break;
  }
  XSetForeground(xvectorinfo.dpy, xvectorinfo.gc, color);
  XDrawArc(xvectorinfo.dpy, backBuffer, xvectorinfo.gc, WD*VECWD/2+(int)(*(float*)&s1_f32*WD/2), HT*VECHT/2-(int)(*(float*)&o1_f32*HT/2), 2, 2, 0, 360*64);
  XSetForeground(xvectorinfo.dpy, xvectorinfo.gc, 0xff0000);
  XDrawLine(xvectorinfo.dpy, backBuffer, xvectorinfo.gc, 0, HT*VECHT, WD*VECWD, 0);
  XSetForeground(xvectorinfo.dpy, xvectorinfo.gc, 0xffffff);
  XDrawLine(xvectorinfo.dpy, backBuffer, xvectorinfo.gc, 0, HT*VECHT/2, WD*VECWD, HT*VECHT/2);
  XSetForeground(xvectorinfo.dpy, xvectorinfo.gc, 0xffffff);
  XDrawLine(xvectorinfo.dpy, backBuffer, xvectorinfo.gc, WD*VECWD/2, 0, WD*VECWD/2, HT*VECHT);
  XdbeSwapBuffers(xvectorinfo.dpy, &swapInfo, 1);
  XSync(xvectorinfo.dpy, 0);
#endif
#endif

  return(0);
}
#endif

#if 0
/******************************************************************************************************************************************/
/*** Unary int Ver.3           ************************************************************************************************************/
/******************************************************************************************************************************************/

int convf32tou8(u8bit *out, float in)
{
  //  convf32tou8 e=126     0.992 -> s0111111  0111111111111111111111111111111111111111111111111111111111111111
  //  convf32tou8 e=126 f=0 0.500 -> s0100000  0000000000000000000000000000000011111111111111111111111111111111
  //  convf32tou8 e=125 f=0 0.250 -> s0010000  0000000000000000000000000000000000000000000000001111111111111111
  //  convf32tou8 e=124 f=0 0.125 -> s0001000  0000000000000000000000000000000000000000000000000000000011111111
  //  convf32tou8 e=123 f=0 0.062 -> s0000100  0000000000000000000000000000000000000000000000000000000000001111
  //  convf32tou8 e=122 f=0 0.031 -> s0000010  0000000000000000000000000000000000000000000000000000000000000011
  //  convf32tou8 e=121 f=0 0.016 -> s0000001  0000000000000000000000000000000000000000000000000000000000000001
  //                        0.000 -> s0000000  0000000000000000000000000000000000000000000000000000000000000000
  f32bit in_f32;

  *(float*)&in_f32 = in;

  if (max_exp < in_f32.e)                 max_exp = in_f32.e;
  if (min_exp > in_f32.e && in_f32.e > 0) min_exp = in_f32.e;

  out->s = in_f32.s;
  out->b = 0;

  in = abs(in);
  if  (in >= 1.0) out->e = 63;
  else            out->e = in*64; /* number of 1 */    

//printf("%7.4f -> %02.2x\n", *(float*)&in_f32, *(Uchar*)out);
}

int convu8tof32(float *out, u8bit in)
{
  f32bit out_f32;

  *(float*)&out_f32 = (float)in.e/64;
  out_f32.s = in.s;
  *out = *(float*)&out_f32;

//printf("%02.2x -> %7.4f\n", *(Uchar*)&in, *out);
}

Ull shuffle(Ull in)
{
  int i;
  Ull r;
  r = ((Ull)rand()<<33)^((Ull)rand()<<16)^(Ull)rand();
  for (i=0; i<32; i++) {
    if (r&(1LL<<(i+16)))
      in = (in&~(1LL<<(i+32)|1LL<<i)) | (in>>i&1)<<(i+32) | (in>>(i+32)&1)<<i;
  }
  for (i=0; i<48; i++) {
    if (r&(1LL<<(i+8)))
      in = (in&~(1LL<<(i+16)|1LL<<i)) | (in>>i&1)<<(i+16) | (in>>(i+16)&1)<<i;
  }
  for (i=0; i<56; i++) {
    if (r&(1LL<<(i+4)))
      in = (in&~(1LL<<(i+ 8)|1LL<<i)) | (in>>i&1)<<(i+ 8) | (in>>(i+ 8)&1)<<i;
  }
  for (i=0; i<60; i++) {
    if (r&(1LL<<(i+2)))
      in = (in&~(1LL<<(i+ 4)|1LL<<i)) | (in>>i&1)<<(i+ 4) | (in>>(i+ 4)&1)<<i;
  }
  for (i=0; i<62; i++) {
    if (r&(1LL<<(i+1)))
      in = (in&~(1LL<<(i+ 2)|1LL<<i)) | (in>>i&1)<<(i+ 2) | (in>>(i+ 2)&1)<<i;
  }
  for (i=0; i<63; i++) {
    if (r&(1LL<<(i+0)))
      in = (in&~(1LL<<(i+ 1)|1LL<<i)) | (in>>i&1)<<(i+ 1) | (in>>(i+ 1)&1)<<i;
  }
  return(in);
}

int bitcountLL(Ull in)
{
  int i, c=0;
  for (i=0; i<64; i++) {
    if (in>>i&1)
      c++;
  }
  return(c);
}

int softu256(u8bit *o, u8bit s1, u256bit s2, u256bit s3) /* o <- f1 + f2 * f3 */
{
  int i, j;
  Ull s2_64[32], s3_64[32];
  int smulS[32];
  Ull smulL[32];
  int sadpLn, sadnLn; /* number of related result */
  int sadpLx, sadnLx; /* next index */
  Ull sadpL,  sadnL;
  int sadpc,  sadnc;  /* number of 1 */
  int out_c;

#undef DEBUG_SOFTU64
//#define DEBUG_SOFTU64

#ifdef DEBUG_SOFTU64
  { int i;
  for (i=0; i<32; i++)
    printf("%02.2x", s2.u[i]);
  printf(" * ");
  for (i=0; i<32; i++)
    printf("%02.2x", s3.u[i]);
  printf("\n");
  }
#endif

#if 0
  float s1_f32;
  float s2_f32;
  float s3_f32;
  convu8tof32(&s1_f32, s1);
  for (i=0; i<32; i++) { /* s2 * s3 -> ad2 */
    convu8tof32(&s2_f32, *(u8bit*)&s2.u[i]);
    convu8tof32(&s3_f32, *(u8bit*)&s3.u[i]);
    s1_f32 += s2_f32*s3_f32;
  }
  convf32tou8(o, s1_f32);
  return(0);
#endif

  sadpLn = 0; sadpLx = 0; sadpL = 0LL;
  sadnLn = 0; sadnLx = 0; sadnL = 0LL;

  // 8データ各要素の下位64bit基本パターン生成
  for (i=0; i<32; i++) { /* s2 * s3 -> ad2 */
    s2_64[i] = (Ull)0x7fffffffffffffffLL>>(63-(((u8bit*)&s2.u[i])->e));
    s3_64[i] = (Ull)0x7fffffffffffffffLL>>(63-(((u8bit*)&s3.u[i])->e));
    // 下位64bit内でシャッフル
    s2_64[i] = shuffle(s2_64[i]);
    s3_64[i] = shuffle(s3_64[i]);
    // s2*s3 各要素の乗算
    smulS[i] = ((u8bit*)&s2.u[i])->s ^ ((u8bit*)&s3.u[i])->s;
    // 乗算結果のうち正数と負数のデータ数をカウント
    if (!smulS[i]) sadpLn++; /* pos */
    else           sadnLn++; /* neg */
    // stochastic
    smulL[i] = s2_64[i] & s3_64[i];
#ifdef DEBUG_SOFTU64
    printf("%02.2x -> %08.8x_%08.8x\n", s2.u[i], (Uint)(s2_64[i]>>32), (Uint)s2_64[i]);
    printf("%02.2x -> %08.8x_%08.8x\n", s3.u[i], (Uint)(s3_64[i]>>32), (Uint)s3_64[i]);
    printf("      %08.8x_%08.8x\n", (Uint)(smulL[i]>>32), (Uint)smulL[i]);
#endif
  }

#ifdef DEBUG_SOFTU64
  printf("  sadpLn=%d sadnLn=%d\n", sadpLn, sadnLn);
#endif

#if 0
  // stochastic
  // 正数/負数グループごとに，下位64bitから順にセレクト(spike平均化)
  for (j=0; j<64; j++) {
    for (i=0; i<32; i++) { /* s2 * s3 -> ad2 */
      sadpLx = (sadpLx<7)?sadpLx+1:0;
      if (!smulS[sadpLx]) {
	sadpL |= smulL[sadpLx] & (1LL<<j);
	break;
      }
    }
    for (i=0; i<32; i++) { /* s2 * s3 -> ad2 */
      sadnLx = (sadnLx<7)?sadnLx+1:0;
      if ( smulS[sadnLx]) {
	sadnL |= smulL[sadnLx] & (1LL<<j);
	break;
      }
    }
  }
  // 正数/負数グループごとの平均spikeにて,1の数を計測
  sadpc = bitcountLL(sadpL);
  sadnc = bitcountLL(sadnL);
  // 平均spike数に,正/負のデータ数を乗じると加算結果になる
  sadpc *= sadpLn; /* scaled add -> mag */
  sadnc *= sadnLn; /* scaled add -> mag */
#ifdef DEBUG_SOFTU64
  printf("  sadpL=%08.8x_%08.8x sadnL=%08.8x_%08.8x\n", (Uint)(sadpL>>32), (Uint)sadpL, (Uint)(sadnL>>32), (Uint)sadnL);
  printf("  sadpc=%d sadnc=%d\n", sadpc, sadnc);
#endif
#else
  sadpc = 0;
  sadnc = 0;
  for (i=0; i<32; i++) { /* s2 * s3 -> ad2 */
    if (!smulS[i]) sadpc += bitcountLL(smulL[i]);
    else           sadnc += bitcountLL(smulL[i]);
  }
#endif

  // s1をさらに加算
  if (!s1.s) sadpc += s1.e; /* merge pos s1 */
  else       sadnc += s1.e; /* merge neg s1 */
  
#ifdef DEBUG_SOFTU64
  printf("  s1=%02.2x\n", *(Uchar*)&s1);
  printf("  sadpc=%d sadnc=%d\n", sadpc, sadnc);
#endif

  // 正数と負数の加算
  if (sadpc >= sadnc) {
    o->s = 0; /* pos */
    o->b = 0;
    out_c = sadpc-sadnc; /* # of 1 */
  }
  else {
    o->s = 1; /* neg */
    o->b = 0;
    out_c = sadnc-sadpc; /* # of 1 */
  }
  if (out_c >= 64) o->e = 63;
  else             o->e = out_c;

#ifdef DEBUG_SOFTU64
  printf("  o=%02.2x\n", *(Uchar*)o);
#endif

#if 0
#if !defined(ARMSIML)
  //シャッフル無しでも結果画像は正常分布に見える
  static int count, color;
  float o1_f32;
  float s1_f32;
  float s2_f32;
  float s3_f32;
  convu8tof32(&o1_f32, *o); /* for graph */
  convu8tof32(&s1_f32, s1); /* for graph */
  for (i=0; i<32; i++) { /* s2 * s3 -> ad2 */
    convu8tof32(&s2_f32, *(u8bit*)&s2.u[i]); /* for graph */
    convu8tof32(&s3_f32, *(u8bit*)&s3.u[i]); /* for graph */
    s1_f32 += s2_f32*s3_f32;
  }
  count++;
  color = (count/1024)%7+1;
  switch(color) {
  case 1: color=0x0000ff; break;
  case 2: color=0x00ff00; break;
  case 3: color=0x00ffff; break;
  case 4: color=0xff0000; break;
  case 5: color=0xff00ff; break;
  case 6: color=0xffff00; break;
  case 7: color=0xffffff; break;
  }
  XSetForeground(xvectorinfo.dpy, xvectorinfo.gc, color);
  XDrawArc(xvectorinfo.dpy, backBuffer, xvectorinfo.gc, WD*VECWD/2+(int)(*(float*)&s1_f32*WD/2), HT*VECHT/2-(int)(*(float*)&o1_f32*HT/2), 2, 2, 0, 360*64);
  XSetForeground(xvectorinfo.dpy, xvectorinfo.gc, 0xff0000);
  XDrawLine(xvectorinfo.dpy, backBuffer, xvectorinfo.gc, 0, HT*VECHT, WD*VECWD, 0);
  XSetForeground(xvectorinfo.dpy, xvectorinfo.gc, 0xffffff);
  XDrawLine(xvectorinfo.dpy, backBuffer, xvectorinfo.gc, 0, HT*VECHT/2, WD*VECWD, HT*VECHT/2);
  XSetForeground(xvectorinfo.dpy, xvectorinfo.gc, 0xffffff);
  XDrawLine(xvectorinfo.dpy, backBuffer, xvectorinfo.gc, WD*VECWD/2, 0, WD*VECWD/2, HT*VECHT);
  XdbeSwapBuffers(xvectorinfo.dpy, &swapInfo, 1);
  XSync(xvectorinfo.dpy, 0);
#endif
#endif

  return(0);
}
#endif

#if 1
/******************************************************************************************************************************************/
/*** Unary int Ver.4           ************************************************************************************************************/
/******************************************************************************************************************************************/

int convf32tou8(u8bit *out, float in)
{
  //  convf32tou8 e=126     0.992 -> s0111111  0111111111111111111111111111111111111111111111111111111111111111
  //  convf32tou8 e=126 f=0 0.500 -> s0100000  0000000000000000000000000000000011111111111111111111111111111111
  //  convf32tou8 e=125 f=0 0.250 -> s0010000  0000000000000000000000000000000000000000000000001111111111111111
  //  convf32tou8 e=124 f=0 0.125 -> s0001000  0000000000000000000000000000000000000000000000000000000011111111
  //  convf32tou8 e=123 f=0 0.062 -> s0000100  0000000000000000000000000000000000000000000000000000000000001111
  //  convf32tou8 e=122 f=0 0.031 -> s0000010  0000000000000000000000000000000000000000000000000000000000000011
  //  convf32tou8 e=121 f=0 0.016 -> s0000001  0000000000000000000000000000000000000000000000000000000000000001
  //                        0.000 -> s0000000  0000000000000000000000000000000000000000000000000000000000000000
  f32bit in_f32;

  *(float*)&in_f32 = in;

  if (max_exp < in_f32.e)                 max_exp = in_f32.e;
  if (min_exp > in_f32.e && in_f32.e > 0) min_exp = in_f32.e;

  out->s = in_f32.s;
  out->b = 0;

  in = abs(in);
  if  (in >= 1.0) out->e = 63;
  else            out->e = in*64; /* number of 1 */    

//printf("%7.4f -> %02.2x\n", *(float*)&in_f32, *(Uchar*)out);
}

int convu8tof32(float *out, u8bit in)
{
  f32bit out_f32;

  *(float*)&out_f32 = (float)in.e/64;
  out_f32.s = in.s;
  *out = *(float*)&out_f32;

//printf("%02.2x -> %7.4f\n", *(Uchar*)&in, *out);
}

Ull shuffle(Ull in)
{
  int i;
  Ull r;
  r = ((Ull)rand()<<33)^((Ull)rand()<<16)^(Ull)rand();
  for (i=0; i<32; i++) {
    if (r&(1LL<<(i+16)))
      in = (in&~(1LL<<(i+32)|1LL<<i)) | (in>>i&1)<<(i+32) | (in>>(i+32)&1)<<i;
  }
  for (i=0; i<48; i++) {
    if (r&(1LL<<(i+8)))
      in = (in&~(1LL<<(i+16)|1LL<<i)) | (in>>i&1)<<(i+16) | (in>>(i+16)&1)<<i;
  }
  for (i=0; i<56; i++) {
    if (r&(1LL<<(i+4)))
      in = (in&~(1LL<<(i+ 8)|1LL<<i)) | (in>>i&1)<<(i+ 8) | (in>>(i+ 8)&1)<<i;
  }
  for (i=0; i<60; i++) {
    if (r&(1LL<<(i+2)))
      in = (in&~(1LL<<(i+ 4)|1LL<<i)) | (in>>i&1)<<(i+ 4) | (in>>(i+ 4)&1)<<i;
  }
  for (i=0; i<62; i++) {
    if (r&(1LL<<(i+1)))
      in = (in&~(1LL<<(i+ 2)|1LL<<i)) | (in>>i&1)<<(i+ 2) | (in>>(i+ 2)&1)<<i;
  }
  for (i=0; i<63; i++) {
    if (r&(1LL<<(i+0)))
      in = (in&~(1LL<<(i+ 1)|1LL<<i)) | (in>>i&1)<<(i+ 1) | (in>>(i+ 1)&1)<<i;
  }
  return(in);
}

int bitcountLL(Ull in)
{
  int i, c=0;
  for (i=0; i<64; i++) {
    if (in>>i&1)
      c++;
  }
  return(c);
}

int softu64(u8bit *o, u8bit s1, u64bit s2, u64bit s3) /* o <- f1 + f2 * f3 */
{
  int i, j;
  Ull s2_64[8], s3_64[8];
  int smulS[8];
  Ull smulL[8];
  int sadpLn, sadnLn; /* number of related result */
  int sadpLx, sadnLx; /* next index */
  Ull sadpL,  sadnL;
  int sadpc,  sadnc;  /* number of 1 */
  int out_c;

#undef DEBUG_SOFTU64
//#define DEBUG_SOFTU64

#ifdef DEBUG_SOFTU64
  printf("%08.8x_%08.8x * %08.8x_%08.8x\n", (Uint)((*(Ull*)&s2)>>32), (Uint)(*(Ull*)&s2), (Uint)((*(Ull*)&s3)>>32), (Uint)(*(Ull*)&s3));
#endif

#if 0
  float s1_f32;
  float s2_f32;
  float s3_f32;
  convu8tof32(&s1_f32, s1);
  for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
    convu8tof32(&s2_f32, *(u8bit*)&s2.u[i]);
    convu8tof32(&s3_f32, *(u8bit*)&s3.u[i]);
    s1_f32 += s2_f32*s3_f32;
  }
  convf32tou8(o, s1_f32);
  return(0);
#endif

  sadpLn = 0;
  sadnLn = 0;

  // 8データ各要素の下位64bit基本パターン生成
  for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
    smulS[i] = ((u8bit*)&s2.u[i])->s ^ ((u8bit*)&s3.u[i])->s;
    // 乗算結果のうち正数と負数のデータ数をカウント
    if (!smulS[i]) sadpLn++; /* pos */
    else           sadnLn++; /* neg */
    s2_64[i] = (Ull)0x7fffffffffffffffLL>>(63-(((u8bit*)&s2.u[i])->e));
    s3_64[i] = (Ull)0x7fffffffffffffffLL>>(63-(((u8bit*)&s3.u[i])->e));
    // 下位64bit内でシャッフル
    s2_64[i] = shuffle(s2_64[i]);
    s3_64[i] = shuffle(s3_64[i]);
    // s2*s3 各要素のstochastic乗算
    smulL[i] = s2_64[i] & s3_64[i];
#ifdef DEBUG_SOFTU64
    printf("%02.2x -> %08.8x_%08.8x\n", s2.u[i], (Uint)(s2_64[i]>>32), (Uint)s2_64[i]);
    printf("%02.2x -> %08.8x_%08.8x\n", s3.u[i], (Uint)(s3_64[i]>>32), (Uint)s3_64[i]);
    printf("      %08.8x_%08.8x\n", (Uint)(smulL[i]>>32), (Uint)smulL[i]);
#endif
  }

#ifdef DEBUG_SOFTU64
  printf("  sadpLn=%d sadnLn=%d\n", sadpLn, sadnLn);
#endif

#if 1
  // stochastic
  // 正数/負数グループごとに，冒頭部分をスナップショット
#define SNAPSHOT_LENGTH 32
  sadpc = 0;
  sadnc = 0;
  for (j=0; j<SNAPSHOT_LENGTH; j++) {
    for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
      if (!smulS[i]) sadpc += (smulL[i] & (1LL<<j))!=0;
      else           sadnc += (smulL[i] & (1LL<<j))!=0;
    }
  }
  sadpc = sadpc*64/SNAPSHOT_LENGTH;
  sadnc = sadnc*64/SNAPSHOT_LENGTH;
#ifdef DEBUG_SOFTU64
  printf("  sadpL=%08.8x_%08.8x sadnL=%08.8x_%08.8x\n", (Uint)(sadpL>>32), (Uint)sadpL, (Uint)(sadnL>>32), (Uint)sadnL);
  printf("  sadpc=%d sadnc=%d\n", sadpc, sadnc);
#endif
#else
  sadpc = 0;
  sadnc = 0;
  for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
    if (!smulS[i]) sadpc += bitcountLL(smulL[i]);
    else           sadnc += bitcountLL(smulL[i]);
  }
#endif

  // s1をさらに加算
  if (!s1.s) sadpc += s1.e; /* merge pos s1 */
  else       sadnc += s1.e; /* merge neg s1 */
  
#ifdef DEBUG_SOFTU64
  printf("  s1=%02.2x\n", *(Uchar*)&s1);
  printf("  sadpc=%d sadnc=%d\n", sadpc, sadnc);
#endif

  // 正数と負数の加算
  if (sadpc >= sadnc) {
    o->s = 0; /* pos */
    o->b = 0;
    out_c = sadpc-sadnc; /* # of 1 */
  }
  else {
    o->s = 1; /* neg */
    o->b = 0;
    out_c = sadnc-sadpc; /* # of 1 */
  }
  if (out_c >= 64) o->e = 63;
  else             o->e = out_c;

#ifdef DEBUG_SOFTU64
  printf("  o=%02.2x\n", *(Uchar*)o);
#endif

#if 0
#if !defined(ARMSIML)
  //シャッフル無しでも結果画像は正常分布に見える
  static int count, color;
  float o1_f32;
  float s1_f32;
  float s2_f32;
  float s3_f32;
  convu8tof32(&o1_f32, *o); /* for graph */
  convu8tof32(&s1_f32, s1); /* for graph */
  for (i=0; i<8; i++) { /* s2 * s3 -> ad2 */
    convu8tof32(&s2_f32, *(u8bit*)&s2.u[i]); /* for graph */
    convu8tof32(&s3_f32, *(u8bit*)&s3.u[i]); /* for graph */
    s1_f32 += s2_f32*s3_f32;
  }
  count++;
  color = (count/1024)%7+1;
  switch(color) {
  case 1: color=0x0000ff; break;
  case 2: color=0x00ff00; break;
  case 3: color=0x00ffff; break;
  case 4: color=0xff0000; break;
  case 5: color=0xff00ff; break;
  case 6: color=0xffff00; break;
  case 7: color=0xffffff; break;
  }
  XSetForeground(xvectorinfo.dpy, xvectorinfo.gc, color);
  XDrawArc(xvectorinfo.dpy, backBuffer, xvectorinfo.gc, WD*VECWD/2+(int)(*(float*)&s1_f32*WD/2), HT*VECHT/2-(int)(*(float*)&o1_f32*HT/2), 2, 2, 0, 360*64);
  XSetForeground(xvectorinfo.dpy, xvectorinfo.gc, 0xff0000);
  XDrawLine(xvectorinfo.dpy, backBuffer, xvectorinfo.gc, 0, HT*VECHT, WD*VECWD, 0);
  XSetForeground(xvectorinfo.dpy, xvectorinfo.gc, 0xffffff);
  XDrawLine(xvectorinfo.dpy, backBuffer, xvectorinfo.gc, 0, HT*VECHT/2, WD*VECWD, HT*VECHT/2);
  XSetForeground(xvectorinfo.dpy, xvectorinfo.gc, 0xffffff);
  XDrawLine(xvectorinfo.dpy, backBuffer, xvectorinfo.gc, WD*VECWD/2, 0, WD*VECWD/2, HT*VECHT);
  XdbeSwapBuffers(xvectorinfo.dpy, &swapInfo, 1);
  XSync(xvectorinfo.dpy, 0);
#endif
#endif

  return(0);
}
#endif
