
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/sample/mm_cnn_lf/RCS/mm.c,v 1.4 2018/02/04 10:28:53 nakashim Exp nakashim $";

/*                          Copyright (C) 2013- by NAIST */
/*                           Primary writer: Y.Nakashima */
/*                                  nakashim@is.naist.jp */

#ifndef UTYPEDEF
#define UTYPEDEF
typedef unsigned char      Uchar;
typedef unsigned short     Ushort;
typedef unsigned int       Uint;
typedef unsigned long long Ull;
typedef long long int      Sll;
#if __AARCH64EL__ == 1
typedef long double Dll;
#else
typedef struct {Ull u[2];} Dll;
#endif
#endif

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <fcntl.h>
#include <math.h>
#ifndef ARMSIML
#include <unistd.h>
#include <sys/times.h>
#include <sys/mman.h>
#include <sys/resource.h>
#include <pthread.h>
#endif

#if defined(EMAX6)
#include "../../src/conv-c2c/emax6.h"
#include "../../src/conv-c2c/emax6lib.c"
#endif

typedef struct _float2D {
  int nstrides;
  int stride_size;
  float *data;
} float2D;

typedef struct _float4D { /* n*c*k*stride_size */
  int nstrides;    /*frames*/
  int nchannel;    /*RGB*/
  int kstrides;    /*H*/
  int stride_size; /*W*/
  float *data;
} float4D;

#define CNN_DEPTH_MAX 9
#define FC_DEPTH_MAX 3

int  CNN_DEPTH = 2;
int  FC_DEPTH = 1;

typedef struct _CNNet {
  /* int oheight; */
  /* int owidth; */
  /* int nbatch; */
  /* int nchannel; */
  /* int ksize, kstrides, psize; */
  float4D ninput;

  float2D tmp_col[CNN_DEPTH_MAX];
  float2D tmp_dst[CNN_DEPTH_MAX];
  float2D Ki2h[CNN_DEPTH_MAX];
  float2D g_Ki2h[CNN_DEPTH_MAX];
  float4D nhidden[CNN_DEPTH_MAX];
  float4D nhiddenbak[CNN_DEPTH_MAX];
  float2D hbias[CNN_DEPTH_MAX];
  float2D g_hbias[CNN_DEPTH_MAX];
  float4D npool[CNN_DEPTH_MAX];
  float4D npoolbak[CNN_DEPTH_MAX];

  float2D nflat[FC_DEPTH_MAX];
  float2D Wh2o[FC_DEPTH_MAX];
  float2D g_Wh2o[FC_DEPTH_MAX];
  float2D nout[FC_DEPTH_MAX];
  float2D noutbak[FC_DEPTH_MAX];
  float2D obias[FC_DEPTH_MAX];
  float2D g_obias[FC_DEPTH_MAX];
} CNNet;

struct c {
  int isize;  /* isize x isize */
  int ichan;  /* in_channels   */
  int ksize;  /* ksize x ksize */
  int osize;  /* osize x osize */
  int ochan;  /* out_channels  */
  int psize;  /* pooling_size  */
};

struct f {
  int osize;  /* osize x osize */
};

struct c c[2][CNN_DEPTH_MAX]={ /* [0]:mnist [1]:cifar10 */
{ /* MNIST(SLITx8 + BWx1) */
  {28,1,5,24,9,2},{12,9,3,12,32,2},{ 6,32,2, 5,32,1},{ 5,32,2,4, 64,1},{ 4, 64,2,3, 64,1}  /*  4700    4368   |  5155    4137   |  8999    8999   |                 |                 *//*¡úC4*/
},
{ /* CIFAR10(SLITx8 + BGRx3) */
  {6,2,3,3,4,1},{3,4,2,2,1,1},{7,16,2,7,32,1},{7,32,2,6,32,2},{3,32,2,2,64,1},{2,64,2,1,64,1}         /*  F1                F1                F2                               *//*¡úC5*/
}
};

struct f f[2][FC_DEPTH_MAX]={ /* [0]:mnist [1]:cifar10 *//* FC_DEPTH 1:{10}, 2:{100},{10}, 3:{200},{100},{10} */
{ /* MNIST(SLITx8 + BWx1)   */
  {200},{10},{10}
},
{ /* CIFAR10(SLITx8 + BGRx3)*/
  {200},{40},{10}    /* FCeta=0.4f C4-F2                            | C5-F2 9000     V2-C5-F2 9000     | C6-F2 3817(58) V2-C6-F2 3594(57) *//*¡ú*/
}
};

void init_float2D(float2D *, int, int);
void multiply_float2D(float2D *, const float2D *, int, const float2D*, int);
void multiply_float2D_sum(float2D *, const float2D *, int, const float2D*, int);
void init_float4D(float4D *, int, int, int, int);
void copy4D(float4D *, const float4D *);
void flat4Dto2D(float2D *, const float4D *);
void raise2Dto4D(float4D *, const float2D *);
void sum_rows4D(float2D *, float4D *);
void show4D(const float4D);
void show4D_limited(const float4D, int);
void LoadParam2D(const char *, int, float2D *);
void LoadParam4D(const char *, float4D *);
void F4i2Ipl(int, int, int, int, unsigned int*, float4D *);
void Ipl2F4i(int, int, int, unsigned int*, float4D *);
void Ipl2F4h(int, int, int, unsigned int*, unsigned int*, float4D *);
void init_net(CNNet *, int, struct c *, struct f *);
void init_xmax(int, struct c *, struct f *);
void xmax_conv_backward(float4D *, float2D *, float2D *, float4D *, int);

Uchar   *membase;
int     memsize;
int     memalign;

Uint    *i_inp; /* for CNN on ZYNQ_PL */
Uint    *i_ker; /* for CNN on ZYNQ_PL */
Uint    *i_out; /* for CNN on ZYNQ_PL */
int     i_inp_max_size;
int     i_ker_max_size;
int     i_out_max_size;

#define ERRTH  (5.0E-4)
#define udiff(a,b) (((a)-(b)>=0.0?(a)-(b):(b)-(a))/((a)==0.0?1:(a)))
#define setmax(max, new) { if (max < (new)) max = (new); }

void init_float2D(float2D *a, int nstrides, int stride_size) {
  if (a == NULL) {
    printf("init_float2D error, 2D nullptr\n");
    exit(-1);
  }
  a->nstrides = nstrides;
  a->stride_size = stride_size;
#ifdef USE_MKL
  if ((a->data = (float *)mkl_malloc(nstrides * stride_size * sizeof(float), 64)) == NULL) {
#else
  if ((a->data = (float *)malloc(nstrides * stride_size * sizeof(float))) == NULL) {    
#endif
    printf("Can not allocate float2D with strides=%d, stride_size=%d\n",
	   nstrides, stride_size);
    exit(-1);
  }
  memset(a->data, 0, nstrides * stride_size * sizeof(float));
}

void init_float4D(float4D *a, int nstrides, int nchannel, int kstrides, int stride_size) {
  if (a == NULL) {
    printf("init_float4D error, 4D nullptr\n");
    exit(-1);
  }
  a->nstrides = nstrides;
  a->nchannel = nchannel;
  a->kstrides = kstrides;
  a->stride_size = stride_size;
#ifdef USE_MKL
  if ((a->data = (float *)mkl_malloc(nstrides * nchannel * kstrides * stride_size * sizeof(float), 64)) == NULL) {
#else
  if ((a->data = (float *)malloc(nstrides * nchannel * kstrides * stride_size * sizeof(float))) == NULL) {
#endif
    printf("Can not allocate float4D with nstrides=%d, nchannel=%d, kstrides=%d, stride_size=%d\n",
	   nstrides, nchannel, kstrides, stride_size);
    exit(-1);
  }
  memset(a->data, 0, nstrides * nchannel * kstrides * stride_size * sizeof(float));
}

void init_net(CNNet *net, int batch_size, struct c *c, struct f *f)
{
  int l;

  if (net == NULL) {
    printf("init_net error: got a nullptr net\n");
    exit(-1);
  }

  /* setup nodes */
  init_float4D(&(net->ninput),          batch_size,                       c[0].ichan,       c[0].isize,            c[0].isize);           /* batch=100, channel=1   28x28 */
  for (l=0; l<CNN_DEPTH; l++) {
    init_float2D(&(net->Ki2h[l]),       c[l].ochan,                       c[l].ichan*c[l].ksize*c[l].ksize);                              /* stride=8,         size=1x5x5 */
    init_float2D(&(net->g_Ki2h[l]),     c[l].ochan,                       c[l].ichan*c[l].ksize*c[l].ksize);                              /* stride=8,         size=1x5x5 */
    init_float4D(&(net->nhidden[l]),    batch_size,                       c[l].ochan,       c[l].osize,            c[l].osize);           /* batch=100, channel=8   24x24 */
    init_float4D(&(net->npool[l]),      batch_size,                       c[l].ochan,       c[l].osize/c[l].psize, c[l].osize/c[l].psize);/* batch=100, channel=8   12x12 */
  }
}

void init_xmax(int batch_size, struct c *c, struct f *f)
{
  int l;

  for (l=0; l<CNN_DEPTH; l++) {
    setmax(i_inp_max_size, batch_size * c[l].ichan * (c[l].isize+c[l].ksize-1) * (c[l].isize+c[l].ksize-1));
    setmax(i_ker_max_size, c[l].ichan * ((c[l].ochan+3)&~3) * c[l].ksize * c[l].ksize);
    setmax(i_out_max_size, batch_size * ((c[l].ochan+3)&~3) * c[l].osize * c[l].osize);
  }
  setmax(memsize, (i_inp_max_size+i_ker_max_size+i_out_max_size)*sizeof(int));
  memalign = 32;

#if defined(ARMZYNQ) && defined(EMAX6)
  if (emax6_open() == NULL)
    exit(1);
  membase = emax_info.ddr_mmap;
  /*{int i; for (i=0; i<(memsize+sizeof(Dll)-1)/sizeof(Dll); i++) *((Dll*)membase+i)=0;}*/
#else
  membase = (void*)malloc(memsize+memalign);
  if ((Ull)membase & (memalign-1))
    membase = (void*)(((Ull)membase & ~(memalign-1))+memalign);
#endif

  printf("membase: %08.8x\n", (Uint)membase);
  i_inp = (Uint*)membase;
  i_ker = (Uint*)i_inp + i_inp_max_size;
  i_out = (Uint*)i_ker + i_ker_max_size;
  printf("i_inp : %08.8x-%08.8x\n", (Uint)i_inp, (Uint)i_inp+i_inp_max_size*sizeof(int)-1);
  printf("i_ker : %08.8x-%08.8x\n", (Uint)i_ker, (Uint)i_ker+i_ker_max_size*sizeof(int)-1);
  printf("i_out : %08.8x-%08.8x\n", (Uint)i_out, (Uint)i_out+i_out_max_size*sizeof(int)-1);

#if !defined(ARMZYNQ) && defined(EMAX6)
  emax_info.dma_phys = DMA_BASE2_PHYS; /* defined in emax6lib.h */
  emax_info.dma_mmap = emax_info.dma_phys;
  emax_info.reg_phys = REG_BASE2_PHYS; /* defined in emax6lib.h */
  emax_info.reg_mmap = emax_info.reg_phys;
  emax_info.lmm_phys = LMM_BASE2_PHYS;
  emax_info.lmm_mmap = emax_info.lmm_phys;
  emax_info.ddr_phys = membase;
  emax_info.ddr_mmap = emax_info.ddr_phys;
#endif
#if (defined(ARMSIML) || defined(ARMZYNQ)) && defined(EMAX6)
  emax6.dma_ctrl  = emax_info.dma_mmap;
  emax6.reg_ctrl  = emax_info.reg_mmap;
  ((struct reg_ctrl*)emax6.reg_ctrl)->i[0].cmd = CMD_RESET;  // RESET
#if defined(ARMZYNQ)
  usleep(1);
#endif
  ((struct reg_ctrl*)emax6.reg_ctrl)->i[0].adtr = emax_info.ddr_mmap - emax_info.lmm_phys;
  ((struct reg_ctrl*)emax6.reg_ctrl)->i[0].dmrp = 0LL;
#endif
}

main()
{
  CNNet   *net;
  int batch_size=2;
  int i, j, k;

  srand(0);
  net = (CNNet *)malloc(sizeof(*net));
  init_net(net, batch_size, c[1], f[1]);
  init_xmax(batch_size, c[1], f[1]);

  for (i=0; i<CNN_DEPTH; i++) {
    for (j=0; j<net->nhidden[i].nstrides*net->nhidden[i].nchannel*net->nhidden[i].kstrides*net->nhidden[i].stride_size; j++)
      net->nhidden[i].data[j] = 0.03f*j;
    for (j=0; j<net->npool[i].nstrides*net->npool[i].nchannel*net->npool[i].kstrides*net->npool[i].stride_size; j++)
      net->npool[i].data[j] = 0.02f*j;
    for (j=0; j<net->Ki2h[i].nstrides*net->Ki2h[i].stride_size; j++)
      net->Ki2h[i].data[j] = 0.01f*j;
  }
  /* ERRTH=5.0E-2 DMA:i=3(300) i=2(100) PIO:OK */
  for (i=CNN_DEPTH-1; i>=1; i--) {
    printf("i=%d\n", i);
    /* (out)nhidden[i], (in) npool[i-1] -> (g_ker)g_Ki2h[i]  */
    /* (out)nhidden[i], (ker)Ki2h[i]    -> (in)   npool[i-1] */
    xmax_conv_backward(&(net->nhidden[i]), &(net->Ki2h[i]), &(net->g_Ki2h[i]), i==0?&(net->ninput):&(net->npool[i-1]), c[1][i].ksize);
  }
}

void imemcpy(Uint *dst, Uint *src, int words)
{
  union {
    Uint i[4];
    Ull  l[2];
    Dll  d;
  } buf;

  Uint loop, i;
  if (words >= 1 && ((Ull)dst & sizeof(Uint))) { /* 4B-access odd */
    *dst++ = *src++;
    words--;
  }
  if (words >= 2 && ((Ull)dst & sizeof(Ull))) { /* 8B-access odd */
    if ((Ull)src & sizeof(Uint)) {
      buf.i[0] = *src++;
      buf.i[1] = *src++;
      *(Ull*)dst = buf.l[0];
    }
    else {
      *(Ull*)dst = *(Ull*)src;
      src += sizeof(Ull)/sizeof(Uint);
    }
    dst += sizeof(Ull)/sizeof(Uint);
    words-=2;
  }

  if (loop = words/(sizeof(Dll)/sizeof(Uint))) {
    if ((Ull)src & sizeof(Uint)) {
      for(i=0; i<loop; i++) {
	buf.i[0] = *src++;
	buf.i[1] = *src++;
	buf.i[2] = *src++;
	buf.i[3] = *src++;
	*(Dll*)dst = buf.d;
	dst += sizeof(Dll)/sizeof(Uint);
      }
    }
    else if ((Ull)src & sizeof(Ull)) {
      for(i=0; i<loop; i++) {
	buf.l[0] = *(Ull*)src;src += sizeof(Ull)/sizeof(Uint);
	buf.l[1] = *(Ull*)src;src += sizeof(Ull)/sizeof(Uint);
	*(Dll*)dst = buf.d;
	dst += sizeof(Dll)/sizeof(Uint);
      }
    }
    else {
      for(i=0; i<loop; i++) {
	*(Dll*)dst = *(Dll*)src;
	src += sizeof(Dll)/sizeof(Uint);
	dst += sizeof(Dll)/sizeof(Uint);
      }
    }
    words -= loop*(sizeof(Dll)/sizeof(Uint));
  }

  if (words >= 2) { /* 8B-access */
    if ((Ull)src & sizeof(Uint)) {
      buf.i[0] = *src++;
      buf.i[1] = *src++;
      *(Ull*)dst = buf.l[0];
    }
    else {
      *(Ull*)dst = *(Ull*)src;
      src += sizeof(Ull)/sizeof(Uint);
    }
    dst += sizeof(Ull)/sizeof(Uint);
    words-=2;
  }
  if (words >= 1) { /* 4B-access */
    *dst++ = *src++;
    words--;
  }
}

void xmax_bzero(Uint *dst, int words)
{
  /* +----+-m-----+ */
  /* |3x3 |       | */
  /* |    |    src| */
  /* +----+       | */
  /* |       +----+ */
  /* |       |    | */
  /* |       | 3x3| */
  /* +-------+----+ */
  Uint loop, i;
  if (words >= 1 && ((Ull)dst & sizeof(Uint))) { /* 4B-access odd */
    *dst++ = 0;
    words--;
  }
  if (words >= 2 && ((Ull)dst & sizeof(Ull))) { /* 8B-access odd */
    *(Ull*)dst = 0;
    dst += sizeof(Ull)/sizeof(Uint);
    words-=2;
  }

  if (loop = words/(sizeof(Dll)/sizeof(Uint))) {
    for(i=0; i<loop; i++) {
#if __AARCH64EL__ == 1
      *((Dll*)dst) = 0;
#else
      ((Dll*)dst)->u[0] = 0;
      ((Dll*)dst)->u[1] = 0;
#endif
      dst += sizeof(Dll)/sizeof(Uint);
    }
    words -= loop*(sizeof(Dll)/sizeof(Uint));
  }

  if (words >= 2) { /* 8B-access */
    *(Ull*)dst = 0;
    dst += sizeof(Ull)/sizeof(Uint);
    words-=2;
  }
  if (words >= 1) { /* 4B-access */
    *dst++ = 0;
    words--;
  }
}

void xmax_cpyin(int order, Uint *dst, int *imo, Uint *src, int batch, int ic, int im, int m, int k)
{
  /* order 0: dst[batch][ic][im*im]  <- src[batch][ic][im*im] */
  /* order 1: dst[ic][im][batch][im] <- src[batch][ic][im*im] */
  /* order 2: dst[im][m]             <- src[im][m]            */

  switch (order) {
  case 0:
    /* num=batch+ichan                            */
    /* imi¤Î¼þÊÕ¤Ë0¤òÄÉ²Ã¤·imo¤Ë¥³¥Ô¡¼            */
    /* k=3,(IM==M)             k=2,(IM==M)        */
    /* +-------+imo-------+    +-----+--imo----+  */
    /* | 0 0 0 |       dst|    | 0 0 |      dst|  */
    /* |  +----+im=m---+  |    |  +--+--im=m---+  */
    /* | 0|3x3 |       |  |    | 0|  |         |  */
    /* | 0|    |    src|  |    +--+--+      src|  */
    /* +--+----+       |  |    |  |            |  */
    /* |  |       +----+--+    |  |            |  */
    /* |  |       |    |0 |    |  |            |  */
    /* |  |       | 3x3|0 |    |  |            |  */
    /* |  +-------+----+  |    +--+------------+  */
    /* |          | 0 0 0 |                       */
    /* +----------+-------+                       */

    /* imi¤Èimo¤ÏÆ±¤¸¥µ¥¤¥º¤Ç¥³¥Ô¡¼                                 */
    /* k=3,(IM-k)/1+1==M       k=2,(IM-k)/1+1==M    k=1,(IM==M)     */
    /* +-------+im--------+    +-----+--im-----+                    */
    /* | x x x |       dst|    | x x |      dst|                    */
    /* |  +----+-m-----+  |    |  +--+---m-----+    +--+--im=m---+  */
    /* | x|3x3 |       |  |    | x|  |         |    |  |         |  */
    /* | x|    |    src|  |    +--+--+      src|    +--+      src|  */
    /* +--+----+       |  |    |  |            |    |            |  */
    /* |  |       +----+--+    |  |            |    |            |  */
    /* |  |       |    |x |    |  |            |    |         +--+  */
    /* |  |       | 3x3|x |    |  |            |    |         |  |  */
    /* |  +-------+----+  |    +--+------------+    +---------+--+  */
    /* |          | x x x |                                         */
    /* +----------+-------+                                         */
    /* EMAX for large IM/M                                   *//*         burst_exe 6*6    ||         burst_exe 6*6    */
    /*     +-----+  +----+-+----+---------+    +-----------+ *//* 7*8... | 7*8... | 7*8... || 7*8... | 7*8... | 7*8... */
    /* unit|2    |  |7*7 | |7*7 |*IC  *100|    |2          | *//*-- -- --                  ||-- -- --                  *//* LMM=7*8*4B */
    /*  |  |*    |  |ch0 | |ch1 |         | -> |*          | *//*         -- -- --         ||         -- -- --         *//*    =244B   */
    /*  V  |2    |  +----+ +----+         |    |2          | *//*                  -- -- --||                  -- -- --*/
    /*     |*ich |  |loop=RMGRP(6)*M(6)   |    |*ich       | *//* stg2     stg4     stg6   || stg2     stg4     stg6   *//* out=6*6*4B*4och */
    /*     +-och-+  +---------------------+    +6*6*och----+ *//* img0     img0     img0   || img1     img1     img1   *//*    =576B        */
    /*        32 ... lmf+lmxËè²óDMA            |    32/4   | *//* ch0      ch1      ch2    || ch0      ch1      ch2    */
    /*                                         +-----------+ */
    if (im == m && 1<k) {
      int n, i, w = im+k-1;
      for (n=0; n<batch*ic; n++,dst+=w*w,src+=im*im) {
	for (i=0; i<k/2; i++)
	  xmax_bzero(dst+i*w, w);
	for (i=k/2; i<=im+k/2-1; i++) {
	  xmax_bzero (dst+i*w,               (k/2) );
	  imemcpy(dst+i*w+(k/2),   src+(i-k/2)*im, im);
	  if (k-1-(k/2)) xmax_bzero (dst+i*w+(k/2)+im, k-1-(k/2));
	}
	for (i=im+k/2; i<w; i++)
	  xmax_bzero(dst+i*w, w);
      }
      *imo = w;
    }
    else {
      imemcpy(dst, src, batch*ic*im*im);
      *imo = im;
    }
    break;
  case 1:
    /* EMAX for small IM/M                                   */
    /*     +-----+  +---------------------+    +-----------+ *//*         burst_exe 6*100  ||         burst_exe 6*100  *//* 100²èÁü¤ò1Ëç(7*700pix)¤Ë(7*100¤ò7¹Ô) */
    /* unit|     |  |+----PAD----+        |    |           | *//* 7*8*100| 7*8*100| 7*8*100|| 7*8*100| 7*8*100| 7*8*100*//* ¤Þ¤¿¤Ï7*7Ï¢Â³¥¢¥É¥ì¥¹¤ò100¥»¥Ã¥È     */
    /*  |  |2    |  ||7*7 | |7*7 |*100 *IC| -> |2          | *//*-- -- --                    -- -- --                  *//* LMM=7*8*4B*100 LMMstg2-7¤Ëload       */
    /*  |  |*    |  ||im0 | |im1 |        |    |*          | *//* top=0   -- -- --            top=1   -- -- --         *//*    =22400B(RMGRP=7¤Ç2²óºÆÍøÍÑ)<32KB  */
    /*  V  |2    |  |+----+ +----+        |    |2          | *//*                  -- -- --                    -- -- --*/
    /*     |*ich |  |loop=M(6)*BATCH(100) |    |*ich       | *//* stg2     stg4     stg6   || stg2     stg4     stg6   *//* out=6*4B*100*4och */
    /*     +-och-+  +---------------------+    +6*100*och--+ *//* img0-99  img0-99  img0-99|| img0-99  img0-99  img0-99*//*    =9600B         */
    /*        32 ... lmf+lmxËè²óDMA            |      32/4 | *//* ch0      ch1      ch2    || ch0      ch1      ch2    */
    /*                                         +-----------+ */
    if (im == m && 1<k) {
      int n1, n0, i, w = im+k-1;
      for (n1=0; n1<batch; n1++) {           /* src-data½ç */
	for (n0=0; n0<ic; n0++,src+=im*im) { /* src-data½ç */
	  int ofs  = (n0*w*batch+n1)*w;      /* Ê£¿ôimg¤Î1¹Ô¤¬Ï¢Â³,chËè¤ËÏ¢Â³ */
	  int dist =  batch*w;               /* Ê£¿ôimg¤Î1¹Ô¤¬Ï¢Â³,»þ¥¢¥É¥ì¥¹¤Ï¼¡¹Ô */
	  for (i=0; i<k/2; i++)
	    xmax_bzero(dst+ofs+i*dist, w);
	  for (i=k/2; i<=im+k/2-1; i++) {
	    xmax_bzero (dst+ofs+i*dist,               (k/2) );
	    imemcpy(dst+ofs+i*dist+(k/2),   src+(i-k/2)*im, im);
	    if (k-1-(k/2)) xmax_bzero (dst+ofs+i*dist+(k/2)+im, k-1-(k/2));
	  }
	  for (i=im+k/2; i<w; i++)
	    xmax_bzero(dst+ofs+i*dist, w);
	}
      }
      *imo = w;
    }
    else {
      int n1, n0, i;
      for (n1=0; n1<batch; n1++) {           /* src-data½ç */
	for (n0=0; n0<ic; n0++,src+=im*im) { /* src-data½ç */
	  int ofs  = (n0*im*batch+n1)*im;
	  int dist =  batch*im;
	  for (i=0; i<im; i++)
	    imemcpy(dst+ofs+i*dist, src+i*im, im);
	}
      }
      *imo = im;
    }
    break;
  case 2:
    imemcpy(dst, src, im*m);
    *imo = im;
    break;
  }
}

void xmax_cpyout(int order, Uint *dst, int batch, int oc, Uint *src, int m, int n, int oc4)
{
  /* order 0: dst[batch][oc][m*n] <- src[batch][oc4][m*n]  */
  /* order 1: dst[batch][oc][m*n] <- src[oc4][m][batch][n] */
  /* order 2: dst[m][n]           <- src[m][oc4=(n+3)&~3]  */

  /* +-dst--------------+    +-imo--------------+ */
  /* | OC | OC | OC |   | <- | OC4   | OC4   |  | */
  /* +------------------+    +------------------+ */
  int k, k2, k1, k0;

  switch (order) {
  case 0:
    for (k=0; k<batch; k++,dst+=oc*m*n,src+=oc4*m*n)
      imemcpy(dst, src, oc*m*n);
    break;
  case 1:
    for (k2=0; k2<batch; k2++) {
      for (k1=0; k1<oc; k1++) {
	for (k0=0; k0<m; k0++,dst+=n)
	  imemcpy(dst, src+((k1*m+k0)*batch+k2)*n, n);
      }
    }
    break;
  case 2:
    if (n == oc4)
      imemcpy(dst, src, m*n);
    else {
      for (k=0; k<m; k++,dst+=n,src+=oc4)
	imemcpy(dst, src, n);
    }
    break;
  }
}

void xmax_conv_backward(float4D *out, float2D *kernel, float2D *g_kernel, float4D *in, int ksize)
{
  int   kstride = 1;
  int   BATCH  = in->nstrides;  //100
  int   IC     = in->nchannel;  //3
  int   IM     = in->kstrides;  //28
  int   IMX;
  int   OC     = out->nchannel; //8
  int   M      = out->kstrides; //24
  int   K      = ksize;         // 5,4,3,2,1
  Uint  *in0   = in->data;      // IC*IM*IM
  Uint  *ker   = kernel->data;  // OC*IC*K*K
  Uint  *g_ker = g_kernel->data;// OC*IC*K*K
  Uint  *out0  = out->data;     // OC*M*M
  Uint  *ip0, *ip1, *ip2, *ip3, *ip4, *ip5, *op0, *kp, kidx, *kp0;
  int   pad;
  int   count, top, iset, oset, oc, w, ic, y, x;
  int   y0, x0, ch, xy;
  Ull   IMX4, IM4, M4, IMX4M4, M4IM4, IMXlen, IMlen, Mlen;
  Ull   CHIP, img, rofs, cofs, iofs, oofs, b00, c00;
  Ull   LOOP1, LOOP0;
  Ull   INIT1, INIT0;
  Ull   AR[64][4];                     /* output of EX     in each unit */
  Ull   BR[64][4][4];                  /* output registers in each unit */
  Ull   r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  Ull   r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31;
  Ull   cc0, cc1, cc2, cc3, ex0, ex1;

  /*  unpack_patch2col(tmp_col, in, ksize, kstride, M, M); */
  /*  for (oc=0;oc<OC;oc++) {                              */
  /*    for (img=0;img<BATCH;img++)                        */
  /*      memcpy(&(tmp_dst->data[(oc*BATCH+img)*M*M]), &(out->data[(oc+img*OC)*M*M]), M*M*sizeof(float));*/
  /*  }                                                    */
  /*  multiply_float2D(g_kernel, tmp_dst, 0, tmp_col, 1); // 8x25 dot 25x57600 --> 8x57600 */
  /*  multiply_float2D(tmp_col, kernel, 1, tmp_dst, 0);    */
  /*  pack_col2patch(in, tmp_col, ksize, kstride, M, M);   */

  if (IM == M)
    pad = 0;   /* PADÌµ¤·.in¼þ°Ï0.0¤ò²¾Äê */
  else if ((IM - K)/1 + 1 == M)
    pad = K/2; /* PADÍ­¤ê.in¼þ°ÏÆÃÊÌ°·¤¤ÉÔÍ× */
  else {
    printf("xmax_conv_backward error: IM=%d K=%d M=%d\n", IM, K, M);
    printf("IM == M || (IM-K)/1+1 == M\n");
    exit(-1);
  }

  /*================================================================================================*/
  /*=== back_g_ker =================================================================================*/
  /*================================================================================================*/

#undef  IMAP
#undef  OMAP
#undef  W
#undef  NCHIP
#define IMAP  4
#define OMAP  1
#define W     1
#define NCHIP 1

#undef XMAX_VALIDATE
#define XMAX_VALIDATE
  /***********************************/
  /* ¡ú¡ú¡ú PBL1-4 (g_kernel) ¡ú¡ú¡ú */
  /***********************************/
  xmax_cpyin(1, i_out, &M,  out0, BATCH, OC,  M, M, 1); //dst[OC][M][BATCH][M]     <- src[BATCH][OC][M][M]
  xmax_cpyin(1, i_inp, &IMX, in0, BATCH, IC, IM, M, K); //dst[IC][IMX][BATCH][IMX] <- src[BATCH][IC][IM][IM]
//xmax_bzero(i_ker, OC*IC*K*K); /* g_kernel */

#if 0
  for (oc=0; oc<OC; oc++) {
    for (ic=0; ic<IC; ic++) {
      for (y=0; y<K; y++) {
	for (x=0; x<K; x++) {
	  *(float*)&i_ker[(oc*IC+ic)*K*K+y*K+x] = 0.02;
	  *(float*)&g_ker[(oc*IC+ic)*K*K+y*K+x] = 0.02;
	}
      }
    }
  }
#endif

  IMX4   = IMX*4;
  M4     = M*4;
  IMX4M4 = IMX4<<32|M4;
  IMXlen = IMX*BATCH;
  Mlen   = M*BATCH;
  /* +----------------------+-----------------------+                     */
  /* |     inp[ic][row]     |out[oc+0][row+yx*]ºÆÍøÍÑ K¹Ô                 */
  /* |                      |ker[oc+0][ic][yx*]     |                     */
  /* +----------------------+-----------------------+                     */
  /* |     inp[ic][row]     |out[oc+1][row+yx*]ºÆÍøÍÑ K¹Ô                 */
  /* |                      |ker[oc+1][ic][yx*]     |                     */
  /* +----------------------+-----------------------+                     */
  /* |     inp[ic][row]     |out[oc+2][row+yx*]ºÆÍøÍÑ K¹Ô                 */
  /* |                      |ker[oc+2][ic][yx*]     |                     */
  /* +----------------------+-----------------------+                     */
  /* |     inp[ic][row]     |out[oc+3][row+yx*]ºÆÍøÍÑ K¹Ô                 */
  /* |                      |ker[oc+3][ic][yx*]     |                     */
  /* +----------------------+-----------------------+                     */
  /*                             oc:stage¤ËÅ¸³«                           */
  /*                                   ic:ºÇ³°¥ë¡¼¥×                      */
  /*                                       y:ÃÊ¿ô¤òËä¤á¤ë¤Û¤ÉÂ¿¤¯¤Ê¤¤     */
  /*                                        x:ÎÙÀÜÍ×ÁÇ¤ÏÊ£¿ôLMM¤ËÊ¬»¶ÉÔ²Ä */
  for (oset=0; oset<((OC+OMAP-1)&~(OMAP-1)); oset+=OMAP) { /* set output channel */
    Uint cc0[OMAP][IMAP], cc1[OMAP][IMAP], inum[IMAP], *ip0[IMAP], *it0[IMAP], onum[OMAP], *op0[OMAP], *ot0[OMAP], *kp0[OMAP][IMAP], *kp1[OMAP][IMAP];
    for (rofs=0; rofs<M; rofs++) {
      for (iset=0; iset<((IC+IMAP-1)&~(IMAP-1)); iset+=IMAP) { /* set offset of input channel */
	kidx = 0;
	for (y=-(K/2); y<K-(K/2); y++) { /* kernel loop */
	  for (x=-(K/2); x<K-(K/2); x++) {
	    printf("oset=%d rofs=%d iset=%d y=%d x=%d\n", oset, rofs, iset, y+K/2, x+K/2);
	    for (ic=0; ic<IMAP; ic++) {
	      inum[ic] = iset+ic;
	      ip0[ic]  = &i_inp[(iset+ic)*IMX*BATCH*IMX+(rofs+y+K/2)*BATCH*IMX+(x+K/2)]; /* input */
	      it0[ic]  = &i_inp[(iset+ic)*IMX*BATCH*IMX+(rofs+y+K/2)*BATCH*IMX];         /* input */
	      for (x0=0; x0<IMXlen; x0++) {
		//printf(" %f", *((float*)it0[ic]+x0));
		*((float*)it0[ic]+x0) = 0.2;
	      }
	    }
	    for (oc=0; oc<OMAP; oc++) {
	      onum[oc] = oset+oc;
	      op0[oc]  = &i_out[(oset+oc)*M*BATCH*M+rofs*BATCH*M]; /* output */
	      ot0[oc]  = op0[oc];
	      for (x0=0; x0<Mlen; x0++) {
		//printf(" %f", *((float*)ot0[oc]+x0));
		*((float*)ot0[oc]+x0) = 0.2;
	      }
	    }
	    for (oc=0; oc<OMAP; oc++) {
	      for (ic=0; ic<IMAP; ic++) {
		kp0[oc][ic] = ((iset+ic)<IC&&(oset+oc)<OC) ? &i_ker[((oset+oc)*IC+iset+ic)*K*K+kidx] : 0; /* NULL skip DMA */
		kp1[oc][ic] = ((iset+ic)<IC&&(oset+oc)<OC) ? &g_ker[((oset+oc)*IC+iset+ic)*K*K+kidx] : 0; /* NULL skip DMA */
		*(float*)kp0[oc][ic] = 0.2;
		*(float*)kp1[oc][ic] = 0.2;
	      }
	    }
	    printf("IMAX starts\n");

#define back_g_ker_core1(b, o, i) \
  exe(OP_CMP_LT,   &cc0[o][i],onum[o], EXP_H3210,      OC,          EXP_H3210, 0LL,            EXP_H3210, OP_NOP, 0LL, OP_NOP, 0LL);    /* stage#1 */\
  exe(OP_CMP_LT,   &cc1[o][i],inum[i], EXP_H3210,      IC,          EXP_H3210, 0LL,            EXP_H3210, OP_NOP, 0LL, OP_NOP, 0LL);    /* stage#1 */\
  mop(OP_LDUWR, 1, &BR[b][1][1],       (Ull)op0[o],    oofs,        MSK_W0,    (Ull)ot0[o],    Mlen,      0,      0,   NULL,   Mlen);   /* stage#2 */\
  mop(OP_LDUWR, 1, &BR[b][2][1],       (Ull)ip0[i],    iofs,        MSK_W1,    (Ull)it0[i],    IMXlen,    0,      0,   NULL,   IMXlen); /* stage#2 IMXlen¤¬Âç¤­¤¤¤Î¤ÇLMM*2»ÈÍÑ */\
  exe(OP_NOP,      &AR[b][0], 0LL,     EXP_H3210,      0LL,         EXP_H3210, 0LL,            EXP_H3210, OP_NOP, 0LL, OP_NOP, 0LL);    /* stage#2 (dummy to set target location) */\
  mop(OP_LDUWR, 1, &b00,               (Ull)kp0[o][i], 0LL,         MSK_W0,    (Ull)kp0[o][i], 1LL,       0,      1,   NULL,   1LL);    /* stage#2 fold¤Ïunit[0]¤ËÍ×»ØÄê */\
  exe(OP_FMA,      &b00,      b00,     EXP_H3210,      BR[b][2][1], EXP_H3210, BR[b][1][1],    EXP_H3210, OP_NOP, 0LL, OP_NOP, 0LL);    /* stage#2 */\
  cex(OP_CEXE,     &ex0, 0, 0, cc1[o][i], cc0[o][i], 0x8888);                                                                           /* stage#2 */\
  mop(OP_STWR,ex0, &b00,               (Ull)kp0[o][i], 0LL,         MSK_D0,    (Ull)kp0[o][i], 1LL,       0,      1,   NULL,   1LL)     /* stage#2 */

//EMAX5A begin back_g_ker mapdist=0
      /*3*/ for (CHIP=0; CHIP<NCHIP; CHIP++) { /* output channels are parallelized by multi-chip (OC4/#chip) */
        /*2*/ for (INIT1=1,LOOP1=BATCH,img=(0-IMX4)<<32|((0-M4)&0xffffffff); LOOP1--; INIT1=0) {                           /* mapped to FOR() on BR[63][1][0] */ /* stage#0 */
          /*1*/ for (INIT0=1,LOOP0=M,cofs=(0-4LL)<<32|((0-4LL)&0xffffffff); LOOP0--; INIT0=0) {                            /* mapped to FOR() on BR[63][0][0] */ /* stage#0 */
                  exe(OP_ADD,      &img,  img,             EXP_H3210,  INIT0?IMX4M4:0, EXP_H3210,  0LL, EXP_H3210, OP_NOP,   0LL,                  OP_NOP, 0LL); /* stage#0 */
		  exe(OP_ADD,      &cofs, INIT0?cofs:cofs, EXP_H3210,  4LL<<32|4LL,    EXP_H3210,  0LL, EXP_H3210, OP_AND,   0xffffffffffffffffLL, OP_NOP, 0LL); /* stage#0 */
		  exe(OP_ADD,      &iofs, img,             EXP_H3210,  cofs,           EXP_H3210,  0LL, EXP_H3210, OP_AND,   0xffffffff00000000LL, OP_NOP, 0LL); /* stage#1 */
		  exe(OP_ADD,      &oofs, img,             EXP_H3210,  cofs,           EXP_H3210,  0LL, EXP_H3210, OP_AND,   0x00000000ffffffffLL, OP_NOP, 0LL); /* stage#1 */
#if 1
		  back_g_ker_core1( 2,  0,  0); /**** oc0 ic0*****/
		  back_g_ker_core1( 3,  0,  1); /**** oc0 ic1*****/
		  back_g_ker_core1( 4,  0,  2); /**** oc0 ic1*****/
		  back_g_ker_core1( 5,  0,  3); /**** oc0 ic1*****/
#endif
                }
              }
            }
//EMAX5A end
//EMAX5A drain_dirty_lmm
#ifdef XMAX_VALIDATE
#define back_g_ker_core1_host(b, o, i) \
  mop(OP_LDUWR, 1, &BR[b][1][1],       (Ull)op0[o],    oofs,        MSK_W0,    (Ull)ot0[o],    Mlen,      0,      0,   NULL,   Mlen);   /* stage#2 */\
  mop(OP_LDUWR, 1, &BR[b][2][1],       (Ull)ip0[i],    iofs,        MSK_W1,    (Ull)it0[i],    IMXlen,    0,      0,   NULL,   IMXlen); /* stage#2 IMXlen¤¬Âç¤­¤¤¤Î¤ÇLMM*2»ÈÍÑ */\
  mop(OP_LDUWR, 1, &b00,               (Ull)kp1[o][i], 0LL,         MSK_W0,    (Ull)kp1[o][i], 1LL,       0,      1,   NULL,   1LL);    /* stage#2 fold¤Ïunit[0]¤ËÍ×»ØÄê */\
  exe(OP_FMA,      &b00,      b00,     EXP_H3210,      BR[b][2][1], EXP_H3210, BR[b][1][1],    EXP_H3210, OP_NOP, 0LL, OP_NOP, 0LL);    /* stage#2 */\
  mop(OP_STWR,  1, &b00,               (Ull)kp1[o][i], 0LL,         MSK_D0,    (Ull)kp1[o][i], 1LL,       0,      1,   NULL,   1LL)     /* stage#2 */
      /*3*/ for (CHIP=0; CHIP<NCHIP; CHIP++) { /* output channels are parallelized by multi-chip (OC4/#chip) */
        /*2*/ for (INIT1=1,LOOP1=BATCH,img=(0-IMX4)<<32|((0-M4)&0xffffffff); LOOP1--; INIT1=0) {                           /* mapped to FOR() on BR[63][1][0] */ /* stage#0 */
          /*1*/ for (INIT0=1,LOOP0=M,cofs=(0-4LL)<<32|((0-4LL)&0xffffffff); LOOP0--; INIT0=0) {                            /* mapped to FOR() on BR[63][0][0] */ /* stage#0 */
                  exe(OP_ADD,      &img,  img,             EXP_H3210,  INIT0?IMX4M4:0, EXP_H3210,  0LL, EXP_H3210, OP_NOP,   0LL,                  OP_NOP, 0LL); /* stage#0 */
		  exe(OP_ADD,      &cofs, INIT0?cofs:cofs, EXP_H3210,  4LL<<32|4LL,    EXP_H3210,  0LL, EXP_H3210, OP_AND,   0xffffffffffffffffLL, OP_NOP, 0LL); /* stage#0 */
		  exe(OP_ADD,      &iofs, img,             EXP_H3210,  cofs,           EXP_H3210,  0LL, EXP_H3210, OP_AND,   0xffffffff00000000LL, OP_NOP, 0LL); /* stage#1 */
		  exe(OP_ADD,      &oofs, img,             EXP_H3210,  cofs,           EXP_H3210,  0LL, EXP_H3210, OP_AND,   0x00000000ffffffffLL, OP_NOP, 0LL); /* stage#1 */
#if 1
		  back_g_ker_core1_host( 2,  0,  0); /**** oc0 ic0*****/
		  back_g_ker_core1_host( 3,  0,  1); /**** oc0 ic1*****/
		  back_g_ker_core1_host( 4,  0,  2); /**** oc0 ic1*****/
		  back_g_ker_core1_host( 5,  0,  3); /**** oc0 ic1*****/
#endif
                }
              }
            }
            for (oc=0; oc<OC; oc++) {
	      for (ic=0; ic<IC; ic++) {
		float xmax = *(float*)kp0[oc][ic], host = *(float*)kp1[oc][ic];
		if (udiff(host,xmax)>ERRTH) printf("x[%d][%d][%d][%d]: g_ker=%7.5e(%8.8x) i_ker=%7.5e(%8.8x)\n", oc, ic, y+K/2, x+K/2, host, *(Uint*)&host, xmax, *(Uint*)&xmax);
		else                        printf(" [%d][%d][%d][%d]: g_ker=%7.5e(%8.8x) i_ker=%7.5e(%8.8x)\n", oc, ic, y+K/2, x+K/2, host, *(Uint*)&host, xmax, *(Uint*)&xmax);
	      }
	    }
#endif
            kidx++;
          }
        }
      }
    }
  }
}
